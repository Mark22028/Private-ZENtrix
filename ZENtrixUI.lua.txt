local ZENtrix = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local TextService = game:GetService("TextService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()
local HttpService = game:GetService("HttpService")

local ThemeColorsRGB = {
    MainBackground = Color3.fromRGB(25, 25, 25),
    SectionBackground = Color3.fromRGB(30, 30, 30),
    DarkContrast = Color3.fromRGB(20, 20, 20),
    LightContrast = Color3.fromRGB(35, 35, 35),
    Accent = Color3.fromRGB(120, 100, 240),
    DarkAccent = Color3.fromRGB(100, 80, 220),
    LightText = Color3.fromRGB(240, 240, 245),
    DarkText = Color3.fromRGB(180, 180, 190),
    SectionText = Color3.fromRGB(230, 230, 230),
    Notification = Color3.fromRGB(30, 30, 35),
    Success = Color3.fromRGB(60, 200, 100),
    Warning = Color3.fromRGB(240, 175, 60),
    Error = Color3.fromRGB(220, 60, 60)
}

local ParsedTheme = ThemeColorsRGB

function ZENtrix:SetTheme(theme)
    for key, value in pairs(theme) do
        if ParsedTheme[key] then
            ParsedTheme[key] = value
        end
    end
end

local function CreateInstance(className, properties)
    local instance = Instance.new(className)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end

local function CreateTween(instance, properties, duration, easingStyle, easingDirection)
    easingStyle = easingStyle or Enum.EasingStyle.Quint
    easingDirection = easingDirection or Enum.EasingDirection.Out
    
    local tween = TweenService:Create(
        instance,
        TweenInfo.new(duration, easingStyle, easingDirection),
        properties
    )
    
    return tween
end

local function AddRippleEffect(button, rippleColor)
    rippleColor = rippleColor or Color3.fromRGB(255, 255, 255)
    
    button.ClipsDescendants = true
    
    local function CreateRipple(x, y)
        local ripple = CreateInstance("Frame", {
            Name = "Ripple",
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundColor3 = rippleColor,
            BackgroundTransparency = 0.7,
            Position = UDim2.new(0, x, 0, y),
            Size = UDim2.new(0, 0, 0, 0),
            ZIndex = 10
        })
        
        local corner = CreateInstance("UICorner", {
            CornerRadius = UDim.new(1, 0),
            Parent = ripple
        })
        
        ripple.Parent = button
        
        local maxSize = math.max(button.AbsoluteSize.X, button.AbsoluteSize.Y) * 2
        local startPos = UDim2.new(0, x, 0, y)
        
        CreateTween(
            ripple, 
            {Size = UDim2.new(0, maxSize, 0, maxSize), BackgroundTransparency = 1}, 
            0.8
        ):Play()
        
        delay(0.8, function()
            ripple:Destroy()
        end)
    end
    
    button.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            local x, y = Mouse.X - button.AbsolutePosition.X, Mouse.Y - button.AbsolutePosition.Y
            CreateRipple(x, y)
        end
    end)
end

local WindowCount = 0
local LoadingScreenActive = false
local Notifications = {}

function ZENtrix:InitializeLoadingScreen(config)
    config = config or {}
    local title = config.Title or "ZENtrix UI"
    local subtitle = config.Subtitle or "Loading..."
    local percentage = config.StartPercentage or 0
    local logo = config.Logo
    local duration = config.Duration or 5
    
    if LoadingScreenActive then return end
    LoadingScreenActive = true
    
    local LoadingGui = CreateInstance("ScreenGui", {
        Name = "ZENtrixLoadingScreen",
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false,
        DisplayOrder = 9999
    })
    
    pcall(function()
        LoadingGui.Parent = CoreGui
    end)
    
    if not LoadingGui.Parent then
        LoadingGui.Parent = Player.PlayerGui
    end
    
    local Background = CreateInstance("Frame", {
        Name = "Background",
        BackgroundColor3 = ParsedTheme.DarkContrast,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        Parent = LoadingGui
    })
    
    local Stars = {}
    for i = 1, 100 do
        local star = CreateInstance("Frame", {
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            BorderSizePixel = 0,
            Size = UDim2.new(0, math.random(1, 3), 0, math.random(1, 3)),
            Position = UDim2.new(math.random(), 0, math.random(), 0),
            Parent = Background
        })
        
        local cornerRadius = math.random(5, 10) / 10
        CreateInstance("UICorner", {
            CornerRadius = UDim.new(cornerRadius, 0),
            Parent = star
        })
        
        local blinkSpeed = math.random(5, 15) / 10
        local transparency = math.random(3, 8) / 10
        
        star.BackgroundTransparency = transparency
        
        local tweeningIn = true
        spawn(function()
            while LoadingScreenActive do
                local tweenTime = blinkSpeed + math.random(-20, 20) / 100
                local targetTransparency = tweeningIn and (transparency - 0.2) or (transparency + 0.2)
                
                CreateTween(
                    star,
                    {BackgroundTransparency = targetTransparency},
                    tweenTime,
                    Enum.EasingStyle.Sine,
                    Enum.EasingDirection.InOut
                ):Play()
                
                tweeningIn = not tweeningIn
                wait(tweenTime)
            end
        end)
        
        table.insert(Stars, star)
    end
    
    local ContentContainer = CreateInstance("Frame", {
        Name = "ContentContainer",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(0, 400, 0, 300),
        Parent = Background
    })
    
    local TitleLabel = CreateInstance("TextLabel", {
        Name = "Title",
        AnchorPoint = Vector2.new(0.5, 0),
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0, 0),
        Size = UDim2.new(1, 0, 0, 50),
        Font = Enum.Font.GothamBold,
        Text = title,
        TextColor3 = ParsedTheme.LightText,
        TextSize = 28,
        Parent = ContentContainer
    })
    
    local SubtitleLabel = CreateInstance("TextLabel", {
        Name = "Subtitle",
        AnchorPoint = Vector2.new(0.5, 0),
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0, 60),
        Size = UDim2.new(1, 0, 0, 30),
        Font = Enum.Font.GothamSemibold,
        Text = subtitle,
        TextColor3 = ParsedTheme.DarkText,
        TextSize = 18,
        Parent = ContentContainer
    })
    
    if logo then
        local LogoImage = CreateInstance("ImageLabel", {
            Name = "Logo",
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundTransparency = 1,
            Position = UDim2.new(0.5, 0, 0.5, 0),
            Size = UDim2.new(0, 120, 0, 120),
            Image = logo,
            Parent = ContentContainer
        })
        
        TitleLabel.Position = UDim2.new(0.5, 0, 0, -50)
        SubtitleLabel.Position = UDim2.new(0.5, 0, 0, 180)
    end
    
    local LoadingBarContainer = CreateInstance("Frame", {
        Name = "LoadingBarContainer",
        AnchorPoint = Vector2.new(0.5, 1),
        BackgroundColor3 = ParsedTheme.DarkContrast,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, 0, 1, -30),
        Size = UDim2.new(0.8, 0, 0, 20),
        Parent = ContentContainer
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = LoadingBarContainer
    })
    
    local LoadingBar = CreateInstance("Frame", {
        Name = "LoadingBar",
        BackgroundColor3 = ParsedTheme.Accent,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(percentage/100, 0, 1, 0),
        Parent = LoadingBarContainer
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = LoadingBar
    })
    
    local PercentageLabel = CreateInstance("TextLabel", {
        Name = "Percentage",
        AnchorPoint = Vector2.new(0.5, 0),
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0, -30),
        Size = UDim2.new(1, 0, 0, 20),
        Font = Enum.Font.GothamSemibold,
        Text = tostring(percentage) .. "%",
        TextColor3 = ParsedTheme.LightText,
        TextSize = 16,
        Parent = LoadingBarContainer
    })
    
    local function UpdatePercentage(value, tweenDuration)
        tweenDuration = tweenDuration or 0.5
        percentage = math.clamp(value, 0, 100)
        
        CreateTween(
            LoadingBar,
            {Size = UDim2.new(percentage/100, 0, 1, 0)},
            tweenDuration,
            Enum.EasingStyle.Quint
        ):Play()
        
        PercentageLabel.Text = tostring(math.floor(percentage)) .. "%"
    end
    
    local startTime = tick()
    local connection = RunService.RenderStepped:Connect(function()
        local elapsed = tick() - startTime
        local progress = math.clamp(elapsed / duration, 0, 1)
        UpdatePercentage(progress * 100, 0.03)
        
        if progress >= 1 and LoadingScreenActive then
            LoadingScreenActive = false
            connection:Disconnect()
            
            CreateTween(
                Background,
                {BackgroundTransparency = 1},
                0.5,
                Enum.EasingStyle.Quint
            ):Play()
            
            for _, obj in pairs(ContentContainer:GetDescendants()) do
                if obj:IsA("Frame") or obj:IsA("TextLabel") or obj:IsA("ImageLabel") then
                    CreateTween(
                        obj,
                        {BackgroundTransparency = 1, TextTransparency = 1, ImageTransparency = 1},
                        0.5,
                        Enum.EasingStyle.Quint
                    ):Play()
                end
            end
            
            delay(0.6, function()
                LoadingGui:Destroy()
            end)
        end
    end)
    
    return {
        UpdatePercentage = UpdatePercentage,
        SetSubtitle = function(text)
            SubtitleLabel.Text = text
        end,
        Finish = function()
            LoadingScreenActive = false
        end
    }
end

function ZENtrix:CreateWindow(title, size)
    WindowCount = WindowCount + 1
    title = title or "ZENtrix Window"
    size = size or UDim2.new(0, 500, 0, 400)
    
    local Window = {}
    local Minimized = false
    local ActiveTab = nil
    local Tabs = {}
    local DraggingFrame = nil
    local DragInput = nil
    local DragStart = nil
    local StartPos = nil
    
    local ScreenGui = CreateInstance("ScreenGui", {
        Name = "ZENtrixUI_" .. WindowCount,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false,
        DisplayOrder = 100 + WindowCount
    })
    
    pcall(function()
        ScreenGui.Parent = CoreGui
    end)
    
    if not ScreenGui.Parent then
        ScreenGui.Parent = Player.PlayerGui
    end
    
    local MainFrame = CreateInstance("Frame", {
        Name = "MainFrame",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = ParsedTheme.MainBackground,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = size,
        ClipsDescendants = true,
        Parent = ScreenGui
    })
    
    local Shadow = CreateInstance("ImageLabel", {
        Name = "Shadow",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(1, 47, 1, 47),
        ZIndex = 0,
        Image = "rbxassetid://6014261993",
        ImageColor3 = Color3.fromRGB(0, 0, 0),
        ImageTransparency = 0.5,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(49, 49, 450, 450),
        Parent = MainFrame
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = MainFrame
    })
    
    local TitleBar = CreateInstance("Frame", {
        Name = "TitleBar",
        BackgroundColor3 = ParsedTheme.DarkContrast,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 40),
        ZIndex = 2,
        Parent = MainFrame
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = TitleBar
    })
    
    local TitleCornerFix = CreateInstance("Frame", {
        Name = "CornerFix",
        BackgroundColor3 = ParsedTheme.DarkContrast,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, -10),
        Size = UDim2.new(1, 0, 0, 10),
        ZIndex = 2,
        Parent = TitleBar
    })
    
    local TitleText = CreateInstance("TextLabel", {
        Name = "TitleText",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 15, 0, 0),
        Size = UDim2.new(1, -130, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = title,
        TextColor3 = ParsedTheme.LightText,
        TextSize = 18,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 2,
        Parent = TitleBar
    })
    
    local CloseButton = CreateInstance("ImageButton", {
        Name = "CloseButton",
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -10, 0.5, 0),
        Size = UDim2.new(0, 24, 0, 24),
        Image = "rbxassetid://6031094678",
        ImageColor3 = ParsedTheme.LightText,
        ZIndex = 2,
        Parent = TitleBar
    })
    
    local MinimizeButton = CreateInstance("ImageButton", {
        Name = "MinimizeButton",
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -44, 0.5, 0),
        Size = UDim2.new(0, 24, 0, 24),
        Image = "rbxassetid://6031068426",
        ImageColor3 = ParsedTheme.LightText,
        ZIndex = 2,
        Parent = TitleBar
    })
    
    local TabsBar = CreateInstance("ScrollingFrame", {
        Name = "TabsBar",
        BackgroundColor3 = ParsedTheme.LightContrast,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 40),
        Size = UDim2.new(0, 150, 1, -40),
        ScrollBarThickness = 0,
        ScrollingEnabled = true,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ZIndex = 2,
        Parent = MainFrame
    })
    
    local TabsListLayout = CreateInstance("UIListLayout", {
        FillDirection = Enum.FillDirection.Vertical,
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = TabsBar
    })
    
    local TabsPadding = CreateInstance("UIPadding", {
        PaddingTop = UDim.new(0, 10),
        Parent = TabsBar
    })
    
    TabsListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        TabsBar.CanvasSize = UDim2.new(0, 0, 0, TabsListLayout.AbsoluteContentSize.Y + 20)
    end)
    
    local TabContent = CreateInstance("Frame", {
        Name = "TabContent",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 150, 0, 40),
        Size = UDim2.new(1, -150, 1, -40),
        ZIndex = 2,
        Parent = MainFrame
    })
    
    local function UpdateTabSizes()
        for _, tab in ipairs(Tabs) do
            if tab.Button and tab.Container then
                local containerSize = tab.Container.Size
                local contentSize = tab.ContentLayout.AbsoluteContentSize.Y + 20
                
                if contentSize > containerSize.Y.Offset then
                    tab.Container.CanvasSize = UDim2.new(0, 0, 0, contentSize)
                else
                    tab.Container.CanvasSize = UDim2.new(0, 0, 0, 0)
                end
            end
        end
    end
    
    CloseButton.MouseButton1Click:Connect(function()
        CreateTween(
            MainFrame,
            {Size = UDim2.new(0, size.X.Offset, 0, 0), Position = UDim2.new(0.5, 0, 0.5, size.Y.Offset / 2)},
            0.5,
            Enum.EasingStyle.Quint
        ):Play()
        
        wait(0.5)
        ScreenGui:Destroy()
    end)
    
    CloseButton.MouseEnter:Connect(function()
        CreateTween(
            CloseButton,
            {ImageColor3 = ParsedTheme.Error},
            0.3
        ):Play()
    end)
    
    CloseButton.MouseLeave:Connect(function()
        CreateTween(
            CloseButton,
            {ImageColor3 = ParsedTheme.LightText},
            0.3
        ):Play()
    end)
    
    MinimizeButton.MouseButton1Click:Connect(function()
        Minimized = not Minimized
        
        if Minimized then
            CreateTween(
                MainFrame,
                {Size = UDim2.new(0, size.X.Offset, 0, 40)},
                0.5,
                Enum.EasingStyle.Quint
            ):Play()
            
            MinimizeButton.Image = "rbxassetid://6031068433"
        else
            CreateTween(
                MainFrame,
                {Size = size},
                0.5,
                Enum.EasingStyle.Quint
            ):Play()
            
            MinimizeButton.Image = "rbxassetid://6031068426"
        end
    end)
    
    MinimizeButton.MouseEnter:Connect(function()
        CreateTween(
            MinimizeButton,
            {ImageColor3 = ParsedTheme.Accent},
            0.3
        ):Play()
    end)
    
    MinimizeButton.MouseLeave:Connect(function()
        CreateTween(
            MinimizeButton,
            {ImageColor3 = ParsedTheme.LightText},
            0.3
        ):Play()
    end)
    
    local function UpdateDrag(input)
        local delta = input.Position - DragStart
        local position = UDim2.new(StartPos.X.Scale, StartPos.X.Offset + delta.X, StartPos.Y.Scale, StartPos.Y.Offset + delta.Y)
        
        CreateTween(
            MainFrame,
            {Position = position},
            0.1,
            Enum.EasingStyle.Sine,
            Enum.EasingDirection.InOut
        ):Play()
    end
    
    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            DraggingFrame = true
            DragStart = input.Position
            StartPos = MainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    DraggingFrame = false
                end
            end)
        end
    end)
    
    TitleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            DragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == DragInput and DraggingFrame then
            UpdateDrag(input)
        end
    end)
    
    function Window:CreateTab(name)
        local Tab = {}
        local TabIndex = #Tabs + 1
        
        local TabButton = CreateInstance("TextButton", {
            Name = "Tab_" .. name,
            BackgroundColor3 = ParsedTheme.DarkContrast,
            BorderSizePixel = 0,
            Size = UDim2.new(0, 130, 0, 30),
            Font = Enum.Font.GothamSemibold,
            Text = name,
            TextColor3 = ParsedTheme.DarkText,
            TextSize = 14,
            ZIndex = 2,
            Parent = TabsBar
        })
        
        CreateInstance("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = TabButton
        })
        
        local TabIndicator = CreateInstance("Frame", {
            Name = "Indicator",
            BackgroundColor3 = ParsedTheme.Accent,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(0, 2, 1, 0),
            Visible = false,
            ZIndex = 2,
            Parent = TabButton
        })
        
        CreateInstance("UICorner", {
            CornerRadius = UDim.new(0, 4),
            Parent = TabIndicator
        })
        
        local TabContainer = CreateInstance("ScrollingFrame", {
            Name = "Container_" .. name,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 1, 0),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            ScrollBarThickness = 4,
            ScrollBarImageColor3 = ParsedTheme.Accent,
            Visible = false,
            ZIndex = 2,
            Parent = TabContent
        })
        
        local ContentLayout = CreateInstance("UIListLayout", {
            FillDirection = Enum.FillDirection.Vertical,
            HorizontalAlignment = Enum.HorizontalAlignment.Center,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 10),
            Parent = TabContainer
        })
        
        local ContentPadding = CreateInstance("UIPadding", {
            PaddingTop = UDim.new(0, 15),
            PaddingLeft = UDim.new(0, 15),
            PaddingRight = UDim.new(0, 15),
            Parent = TabContainer
        })
        
        ContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            TabContainer.CanvasSize = UDim2.new(0, 0, 0, ContentLayout.AbsoluteContentSize.Y + 30)
        end)
        
        TabButton.MouseButton1Click:Connect(function()
            for _, tab in ipairs(Tabs) do
                tab.Container.Visible = false
                tab.Button.BackgroundColor3 = ParsedTheme.DarkContrast
                tab.Button.TextColor3 = ParsedTheme.DarkText
                tab.Indicator.Visible = false
            end
            
            TabContainer.Visible = true
            ActiveTab = TabIndex
            
            CreateTween(
                TabButton,
                {BackgroundColor3 = ParsedTheme.LightContrast, TextColor3 = ParsedTheme.LightText},
                0.3
            ):Play()
            
            TabIndicator.Visible = true
        end)
        
        TabButton.MouseEnter:Connect(function()
            if ActiveTab ~= TabIndex then
                CreateTween(
                    TabButton,
                    {BackgroundColor3 = ParsedTheme.LightContrast},
                    0.3
                ):Play()
            end
        end)
        
        TabButton.MouseLeave:Connect(function()
            if ActiveTab ~= TabIndex then
                CreateTween(
                    TabButton,
                    {BackgroundColor3 = ParsedTheme.DarkContrast},
                    0.3
                ):Play()
            end
        end)
        
        Tab.Button = TabButton
        Tab.Indicator = TabIndicator
        Tab.Container = TabContainer
        Tab.ContentLayout = ContentLayout
        
        table.insert(Tabs, Tab)
        
        if #Tabs == 1 then
            TabButton.BackgroundColor3 = ParsedTheme.LightContrast
            TabButton.TextColor3 = ParsedTheme.LightText
            TabContainer.Visible = true
            TabIndicator.Visible = true
            ActiveTab = 1
        end
        
        function Tab:AddSection(sectionTitle)
            local Section = {}
            
            local SectionFrame = CreateInstance("Frame", {
                Name = "Section_" .. sectionTitle,
                BackgroundColor3 = ParsedTheme.SectionBackground,
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 0, 40),
                ZIndex = 2,
                Parent = TabContainer
            })
            
            CreateInstance("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = SectionFrame
            })
            
            local SectionTitle = CreateInstance("TextLabel", {
                Name = "Title",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -30, 0, 40),
                Font = Enum.Font.GothamBold,
                Text = sectionTitle,
                TextColor3 = ParsedTheme.SectionText,
                TextSize = 16,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 2,
                Parent = SectionFrame
            })
            
            local ElementsContainer = CreateInstance("Frame", {
                Name = "Elements",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 40),
                Size = UDim2.new(1, 0, 0, 0),
                ClipsDescendants = true,
                ZIndex = 2,
                Parent = SectionFrame
            })
            
            local ElementsLayout = CreateInstance("UIListLayout", {
                FillDirection = Enum.FillDirection.Vertical,
                HorizontalAlignment = Enum.HorizontalAlignment.Center,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 10),
                Parent = ElementsContainer
            })
            
            local ElementsPadding = CreateInstance("UIPadding", {
                PaddingTop = UDim.new(0, 5),
                PaddingBottom = UDim.new(0, 10),
                PaddingLeft = UDim.new(0, 10),
                PaddingRight = UDim.new(0, 10),
                Parent = ElementsContainer
            })
            
            ElementsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                ElementsContainer.Size = UDim2.new(1, 0, 0, ElementsLayout.AbsoluteContentSize.Y + 15)
                SectionFrame.Size = UDim2.new(1, 0, 0, ElementsContainer.Size.Y.Offset + 40)
                UpdateTabSizes()
            end)
            
            function Section:AddParagraph(title, content)
                local ParagraphFrame = CreateInstance("Frame", {
                    Name = "Paragraph",
                    BackgroundColor3 = ParsedTheme.DarkContrast,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, 60),
                    ZIndex = 2,
                    Parent = ElementsContainer
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = ParagraphFrame
                })
                
                local ParagraphTitle = CreateInstance("TextLabel", {
                    Name = "Title",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 8),
                    Size = UDim2.new(1, -20, 0, 20),
                    Font = Enum.Font.GothamBold,
                    Text = title,
                    TextColor3 = ParsedTheme.LightText,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ZIndex = 2,
                    Parent = ParagraphFrame
                })
                
                local ParagraphContent = CreateInstance("TextLabel", {
                    Name = "Content",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 28),
                    Size = UDim2.new(1, -20, 0, 20),
                    Font = Enum.Font.Gotham,
                    Text = content,
                    TextColor3 = ParsedTheme.DarkText,
                    TextSize = 14,
                    TextWrapped = true,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ZIndex = 2,
                    Parent = ParagraphFrame
                })
                
                local textSize = TextService:GetTextSize(
                    content,
                    14,
                    Enum.Font.Gotham,
                    Vector2.new(ParagraphContent.AbsoluteSize.X, math.huge)
                )
                
                local contentHeight = textSize.Y
                ParagraphContent.Size = UDim2.new(1, -20, 0, contentHeight)
                ParagraphFrame.Size = UDim2.new(1, 0, 0, contentHeight + 40)
                
                return {
                    SetTitle = function(newTitle)
                        ParagraphTitle.Text = newTitle
                    end,
                    
                    SetContent = function(newContent)
                        ParagraphContent.Text = newContent
                        
                        local textSize = TextService:GetTextSize(
                            newContent,
                            14,
                            Enum.Font.Gotham,
                            Vector2.new(ParagraphContent.AbsoluteSize.X, math.huge)
                        )
                        
                        local contentHeight = textSize.Y
                        ParagraphContent.Size = UDim2.new(1, -20, 0, contentHeight)
                        ParagraphFrame.Size = UDim2.new(1, 0, 0, contentHeight + 40)
                        UpdateTabSizes()
                    end
                }
            end
            
            function Section:AddLabel(text)
                local LabelFrame = CreateInstance("Frame", {
                    Name = "Label",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 20),
                    ZIndex = 2,
                    Parent = ElementsContainer
                })
                
                local LabelText = CreateInstance("TextLabel", {
                    Name = "Text",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    Font = Enum.Font.GothamSemibold,
                    Text = text,
                    TextColor3 = ParsedTheme.SectionText,
                    TextSize = 14,
                    ZIndex = 2,
                    Parent = LabelFrame
                })
                
                return {
                    SetText = function(newText)
                        LabelText.Text = newText
                    end
                }
            end
            
            function Section:AddButton(text, callback)
                callback = callback or function() end
                
                local ButtonFrame = CreateInstance("Frame", {
                    Name = "Button",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 35),
                    ZIndex = 2,
                    Parent = ElementsContainer
                })
                
                local Button = CreateInstance("TextButton", {
                    Name = "ButtonElement",
                    BackgroundColor3 = ParsedTheme.DarkContrast,
                    Size = UDim2.new(1, 0, 1, 0),
                    Font = Enum.Font.GothamSemibold,
                    Text = text,
                    TextColor3 = ParsedTheme.LightText,
                    TextSize = 14,
                    ZIndex = 2,
                    Parent = ButtonFrame
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = Button
                })
                
                AddRippleEffect(Button, ParsedTheme.Accent)
                
                Button.MouseButton1Click:Connect(function()
                    callback()
                end)
                
                Button.MouseEnter:Connect(function()
                    CreateTween(
                        Button,
                        {BackgroundColor3 = ParsedTheme.LightContrast},
                        0.3
                    ):Play()
                end)
                
                Button.MouseLeave:Connect(function()
                    CreateTween(
                        Button,
                        {BackgroundColor3 = ParsedTheme.DarkContrast},
                        0.3
                    ):Play()
                end)
                
                return {
                    SetText = function(newText)
                        Button.Text = newText
                    end
                }
            end
            
            function Section:AddToggle(text, default, callback)
                default = default or false
                callback = callback or function() end
                
                local state = default
                
                local ToggleFrame = CreateInstance("Frame", {
                    Name = "Toggle",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 35),
                    ZIndex = 2,
                    Parent = ElementsContainer
                })
                
                local ToggleLabel = CreateInstance("TextLabel", {
                    Name = "Label",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, -55, 1, 0),
                    Font = Enum.Font.GothamSemibold,
                    Text = text,
                    TextColor3 = ParsedTheme.LightText,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ZIndex = 2,
                    Parent = ToggleFrame
                })
                
                local ToggleButton = CreateInstance("Frame", {
                    Name = "Button",
                    AnchorPoint = Vector2.new(1, 0.5),
                    BackgroundColor3 = state and ParsedTheme.Accent or ParsedTheme.DarkContrast,
                    Position = UDim2.new(1, 0, 0.5, 0),
                    Size = UDim2.new(0, 45, 0, 22),
                    ZIndex = 2,
                    Parent = ToggleFrame
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = ToggleButton
                })
                
                local ToggleCircle = CreateInstance("Frame", {
                    Name = "Circle",
                    AnchorPoint = Vector2.new(0, 0.5),
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Position = state and UDim2.new(1, -18, 0.5, 0) or UDim2.new(0, 4, 0.5, 0),
                    Size = UDim2.new(0, 14, 0, 14),
                    ZIndex = 2,
                    Parent = ToggleButton
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = ToggleCircle
                })
                
                local ToggleClickArea = CreateInstance("TextButton", {
                    Name = "ClickArea",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    Text = "",
                    ZIndex = 3,
                    Parent = ToggleFrame
                })
                
                local function UpdateToggle()
                    local targetPosition = state and UDim2.new(1, -18, 0.5, 0) or UDim2.new(0, 4, 0.5, 0)
                    local targetColor = state and ParsedTheme.Accent or ParsedTheme.DarkContrast
                    
                    CreateTween(
                        ToggleCircle,
                        {Position = targetPosition},
                        0.3,
                        Enum.EasingStyle.Quint
                    ):Play()
                    
                    CreateTween(
                        ToggleButton,
                        {BackgroundColor3 = targetColor},
                        0.3,
                        Enum.EasingStyle.Quint
                    ):Play()
                    
                    callback(state)
                end
                
                ToggleClickArea.MouseButton1Click:Connect(function()
                    state = not state
                    UpdateToggle()
                end)
                
                return {
                    SetState = function(newState)
                        state = newState
                        UpdateToggle()
                    end,
                    
                    GetState = function()
                        return state
                    end
                }
            end
            
            function Section:AddSlider(text, min, max, default, callback)
                min = min or 0
                max = max or 100
                default = default or min
                callback = callback or function() end
                
                local value = default
                
                local SliderFrame = CreateInstance("Frame", {
                    Name = "Slider",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 50),
                    ZIndex = 2,
                    Parent = ElementsContainer
                })
                
                local SliderLabel = CreateInstance("TextLabel", {
                    Name = "Label",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, 0, 0, 20),
                    Font = Enum.Font.GothamSemibold,
                    Text = text,
                    TextColor3 = ParsedTheme.LightText,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ZIndex = 2,
                    Parent = SliderFrame
                })
                
                local ValueLabel = CreateInstance("TextLabel", {
                    Name = "Value",
                    AnchorPoint = Vector2.new(1, 0),
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, 0, 0, 0),
                    Size = UDim2.new(0, 50, 0, 20),
                    Font = Enum.Font.GothamSemibold,
                    Text = tostring(value),
                    TextColor3 = ParsedTheme.DarkText,
                    TextSize = 14,
                    ZIndex = 2,
                    Parent = SliderFrame
                })
                
                local SliderBackground = CreateInstance("Frame", {
                    Name = "Background",
                    BackgroundColor3 = ParsedTheme.DarkContrast,
                    Position = UDim2.new(0, 0, 0, 25),
                    Size = UDim2.new(1, 0, 0, 10),
                    ZIndex = 2,
                    Parent = SliderFrame
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = SliderBackground
                })
                
                local SliderFill = CreateInstance("Frame", {
                    Name = "Fill",
                    BackgroundColor3 = ParsedTheme.Accent,
                    Size = UDim2.new((value - min) / (max - min), 0, 1, 0),
                    ZIndex = 2,
                    Parent = SliderBackground
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = SliderFill
                })
                
                local SliderButton = CreateInstance("TextButton", {
                    Name = "Button",
                    AnchorPoint = Vector2.new(0.5, 0.5),
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Position = UDim2.new((value - min) / (max - min), 0, 0.5, 0),
                    Size = UDim2.new(0, 16, 0, 16),
                    Text = "",
                    ZIndex = 3,
                    Parent = SliderBackground
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = SliderButton
                })
                
                local dragging = false
                
                local function UpdateSlider(newValue, usingMouse)
                    value = math.clamp(newValue, min, max)
                    
                    local percent = (value - min) / (max - min)
                    
                    if usingMouse then
                        CreateTween(
                            SliderButton,
                            {Position = UDim2.new(percent, 0, 0.5, 0)},
                            0.1,
                            Enum.EasingStyle.Sine,
                            Enum.EasingDirection.InOut
                        ):Play()
                        
                        CreateTween(
                            SliderFill,
                            {Size = UDim2.new(percent, 0, 1, 0)},
                            0.1,
                            Enum.EasingStyle.Sine,
                            Enum.EasingDirection.InOut
                        ):Play()
                    else
                        SliderButton.Position = UDim2.new(percent, 0, 0.5, 0)
                        SliderFill.Size = UDim2.new(percent, 0, 1, 0)
                    end
                    
                    ValueLabel.Text = tostring(math.floor(value * 100) / 100)
                    callback(value)
                end
                
                SliderButton.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        dragging = true
                    end
                end)
                
                SliderButton.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        dragging = false
                    end
                end)
                
                SliderBackground.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        dragging = true
                        
                        local percent = math.clamp((input.Position.X - SliderBackground.AbsolutePosition.X) / SliderBackground.AbsoluteSize.X, 0, 1)
                        local newValue = min + (max - min) * percent
                        
                        UpdateSlider(newValue, true)
                    end
                end)
                
                UserInputService.InputEnded:Connect(function(input)
                    if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
                        dragging = false
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                        local percent = math.clamp((input.Position.X - SliderBackground.AbsolutePosition.X) / SliderBackground.AbsoluteSize.X, 0, 1)
                        local newValue = min + (max - min) * percent
                        
                        UpdateSlider(newValue, true)
                    end
                end)
                
                return {
                    SetValue = function(newValue)
                        UpdateSlider(newValue, true)
                    end,
                    
                    GetValue = function()
                        return value
                    end
                }
            end
            
            function Section:AddDropdown(text, options, default, callback)
                options = options or {}
                default = default or (options[1] or "")
                callback = callback or function() end
                
                local selected = default
                local open = false
                
                local DropdownFrame = CreateInstance("Frame", {
                    Name = "Dropdown",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 40),
                    ZIndex = 2,
                    Parent = ElementsContainer
                })
                
                local DropdownLabel = CreateInstance("TextLabel", {
                    Name = "Label",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, 0, 0, 20),
                    Font = Enum.Font.GothamSemibold,
                    Text = text,
                    TextColor3 = ParsedTheme.LightText,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ZIndex = 2,
                    Parent = DropdownFrame
                })
                
                local DropdownButton = CreateInstance("TextButton", {
                    Name = "Button",
                    BackgroundColor3 = ParsedTheme.DarkContrast,
                    Position = UDim2.new(0, 0, 0, 20),
                    Size = UDim2.new(1, 0, 0, 35),
                    Font = Enum.Font.GothamSemibold,
                    Text = selected,
                    TextColor3 = ParsedTheme.LightText,
                    TextSize = 14,
                    ZIndex = 2,
                    Parent = DropdownFrame
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = DropdownButton
                })
                
                local DropdownIcon = CreateInstance("ImageLabel", {
                    Name = "Icon",
                    AnchorPoint = Vector2.new(1, 0.5),
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -10, 0.5, 0),
                    Size = UDim2.new(0, 20, 0, 20),
                    Image = "rbxassetid://6031094670",
                    ImageColor3 = ParsedTheme.LightText,
                    ZIndex = 2,
                    Parent = DropdownButton
                })
                
                local DropdownContent = CreateInstance("Frame", {
                    Name = "Content",
                    BackgroundColor3 = ParsedTheme.LightContrast,
                    Position = UDim2.new(0, 0, 1, 5),
                    Size = UDim2.new(1, 0, 0, 0),
                    Visible = false,
                    ClipsDescendants = true,
                    ZIndex = 3,
                    Parent = DropdownButton
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = DropdownContent
                })
                
                local OptionsContainer = CreateInstance("ScrollingFrame", {
                    Name = "Options",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    CanvasSize = UDim2.new(0, 0, 0, 0),
                    ScrollBarThickness = 4,
                    ScrollBarImageColor3 = ParsedTheme.Accent,
                    ZIndex = 3,
                    Parent = DropdownContent
                })
                
                local OptionsLayout = CreateInstance("UIListLayout", {
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Padding = UDim.new(0, 5),
                    Parent = OptionsContainer
                })
                
                local OptionsPadding = CreateInstance("UIPadding", {
                    PaddingTop = UDim.new(0, 5),
                    PaddingBottom = UDim.new(0, 5),
                    PaddingLeft = UDim.new(0, 5),
                    PaddingRight = UDim.new(0, 5),
                    Parent = OptionsContainer
                })
                
                for i, option in ipairs(options) do
                    local OptionButton = CreateInstance("TextButton", {
                        Name = "Option_" .. i,
                        BackgroundColor3 = ParsedTheme.DarkContrast,
                        Size = UDim2.new(1, 0, 0, 30),
                        Font = Enum.Font.Gotham,
                        Text = option,
                        TextColor3 = option == selected and ParsedTheme.Accent or ParsedTheme.LightText,
                        TextSize = 14,
                        ZIndex = 3,
                        Parent = OptionsContainer
                    })
                    
                    CreateInstance("UICorner", {
                        CornerRadius = UDim.new(0, 6),
                        Parent = OptionButton
                    })
                    
                    OptionButton.MouseButton1Click:Connect(function()
                        selected = option
                        DropdownButton.Text = selected
                        
                        for _, optionBtn in ipairs(OptionsContainer:GetChildren()) do
                            if optionBtn:IsA("TextButton") then
                                optionBtn.TextColor3 = optionBtn.Text == selected and ParsedTheme.Accent or ParsedTheme.LightText
                            end
                        end
                        
                        open = false
                        
                        CreateTween(
                            DropdownContent,
                            {Size = UDim2.new(1, 0, 0, 0)},
                            0.3,
                            Enum.EasingStyle.Quint
                        ):Play()
                        
                        CreateTween(
                            DropdownIcon,
                            {Rotation = 0},
                            0.3,
                            Enum.EasingStyle.Quint
                        ):Play()
                        
                        delay(0.3, function()
                            DropdownContent.Visible = false
                            DropdownFrame.Size = UDim2.new(1, 0, 0, 55)
                            UpdateTabSizes()
                        end)
                        
                        callback(selected)
                    end)
                    
                    OptionButton.MouseEnter:Connect(function()
                        if option ~= selected then
                            CreateTween(
                                OptionButton,
                                {BackgroundColor3 = ParsedTheme.LightContrast},
                                0.3
                            ):Play()
                        end
                    end)
                    
                    OptionButton.MouseLeave:Connect(function()
                        if option ~= selected then
                            CreateTween(
                                OptionButton,
                                {BackgroundColor3 = ParsedTheme.DarkContrast},
                                0.3
                            ):Play()
                        end
                    end)
                end
                
                OptionsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                    OptionsContainer.CanvasSize = UDim2.new(0, 0, 0, OptionsLayout.AbsoluteContentSize.Y + 10)
                end)
                
                local contentHeight = math.min(OptionsLayout.AbsoluteContentSize.Y + 10, 150)
                
                DropdownButton.MouseButton1Click:Connect(function()
                    open = not open
                    
                    if open then
                        DropdownContent.Visible = true
                        
                        CreateTween(
                            DropdownContent,
                            {Size = UDim2.new(1, 0, 0, contentHeight)},
                            0.3,
                            Enum.EasingStyle.Quint
                        ):Play()
                        
                        CreateTween(
                            DropdownIcon,
                            {Rotation = 180},
                            0.3,
                            Enum.EasingStyle.Quint
                        ):Play()
                        
                        DropdownFrame.Size = UDim2.new(1, 0, 0, 55 + contentHeight + 5)
                    else
                        CreateTween(
                            DropdownContent,
                            {Size = UDim2.new(1, 0, 0, 0)},
                            0.3,
                            Enum.EasingStyle.Quint
                        ):Play()
                        
                        CreateTween(
                            DropdownIcon,
                            {Rotation = 0},
                            0.3,
                            Enum.EasingStyle.Quint
                        ):Play()
                        
                        delay(0.3, function()
                            DropdownContent.Visible = false
                            DropdownFrame.Size = UDim2.new(1, 0, 0, 55)
                        end)
                    end
                    
                    UpdateTabSizes()
                end)
                
                DropdownButton.MouseEnter:Connect(function()
                    CreateTween(
                        DropdownButton,
                        {BackgroundColor3 = ParsedTheme.LightContrast},
                        0.3
                    ):Play()
                end)
                
                DropdownButton.MouseLeave:Connect(function()
                    CreateTween(
                        DropdownButton,
                        {BackgroundColor3 = ParsedTheme.DarkContrast},
                        0.3
                    ):Play()
                end)
                
                return {
                    Select = function(option)
                        if table.find(options, option) then
                            selected = option
                            DropdownButton.Text = selected
                            
                            for _, optionBtn in ipairs(OptionsContainer:GetChildren()) do
                                if optionBtn:IsA("TextButton") then
                                    optionBtn.TextColor3 = optionBtn.Text == selected and ParsedTheme.Accent or ParsedTheme.LightText
                                end
                            end
                            
                            callback(selected)
                        end
                    end,
                    
                    GetSelection = function()
                        return selected
                    end,
                    
                    SetOptions = function(newOptions)
                        options = newOptions
                        
                        for _, child in ipairs(OptionsContainer:GetChildren()) do
                            if child:IsA("TextButton") then
                                child:Destroy()
                            end
                        end
                        
                        for i, option in ipairs(options) do
                            local OptionButton = CreateInstance("TextButton", {
                                Name = "Option_" .. i,
                                BackgroundColor3 = ParsedTheme.DarkContrast,
                                Size = UDim2.new(1, 0, 0, 30),
                                Font = Enum.Font.Gotham,
                                Text = option,
                                TextColor3 = option == selected and ParsedTheme.Accent or ParsedTheme.LightText,
                                TextSize = 14,
                                ZIndex = 3,
                                Parent = OptionsContainer
                            })
                            
                            CreateInstance("UICorner", {
                                CornerRadius = UDim.new(0, 6),
                                Parent = OptionButton
                            })
                            
                            OptionButton.MouseButton1Click:Connect(function()
                                selected = option
                                DropdownButton.Text = selected
                                
                                for _, optionBtn in ipairs(OptionsContainer:GetChildren()) do
                                    if optionBtn:IsA("TextButton") then
                                        optionBtn.TextColor3 = optionBtn.Text == selected and ParsedTheme.Accent or ParsedTheme.LightText
                                    end
                                end
                                
                                open = false
                                
                                CreateTween(
                                    DropdownContent,
                                    {Size = UDim2.new(1, 0, 0, 0)},
                                    0.3,
                                    Enum.EasingStyle.Quint
                                ):Play()
                                
                                CreateTween(
                                    DropdownIcon,
                                    {Rotation = 0},
                                    0.3,
                                    Enum.EasingStyle.Quint
                                ):Play()
                                
                                delay(0.3, function()
                                    DropdownContent.Visible = false
                                    DropdownFrame.Size = UDim2.new(1, 0, 0, 55)
                                    UpdateTabSizes()
                                end)
                                
                                callback(selected)
                            end)
                            
                            OptionButton.MouseEnter:Connect(function()
                                if option ~= selected then
                                    CreateTween(
                                        OptionButton,
                                        {BackgroundColor3 = ParsedTheme.LightContrast},
                                        0.3
                                    ):Play()
                                end
                            end)
                            
                            OptionButton.MouseLeave:Connect(function()
                                if option ~= selected then
                                    CreateTween(
                                        OptionButton,
                                        {BackgroundColor3 = ParsedTheme.DarkContrast},
                                        0.3
                                    ):Play()
                                end
                            end)
                        end
                        
                        contentHeight = math.min(OptionsLayout.AbsoluteContentSize.Y + 10, 150)
                        
                        if selected ~= "" and not table.find(options, selected) then
                            if #options > 0 then
                                selected = options[1]
                                DropdownButton.Text = selected
                                callback(selected)
                            else
                                selected = ""
                                DropdownButton.Text = "No options"
                            end
                        end
                        
                        UpdateTabSizes()
                    end
                }
            end
            
            function Section:AddTextbox(text, placeholder, callback)
                placeholder = placeholder or "Enter text..."
                callback = callback or function() end
                
                local TextboxFrame = CreateInstance("Frame", {
                    Name = "Textbox",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 55),
                    ZIndex = 2,
                    Parent = ElementsContainer
                })
                
                local TextboxLabel = CreateInstance("TextLabel", {
                    Name = "Label",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, 0, 0, 20),
                    Font = Enum.Font.GothamSemibold,
                    Text = text,
                    TextColor3 = ParsedTheme.LightText,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ZIndex = 2,
                    Parent = TextboxFrame
                })
                
                local TextboxContainer = CreateInstance("Frame", {
                    Name = "Container",
                    BackgroundColor3 = ParsedTheme.DarkContrast,
                    Position = UDim2.new(0, 0, 0, 20),
                    Size = UDim2.new(1, 0, 0, 35),
                    ZIndex = 2,
                    Parent = TextboxFrame
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = TextboxContainer
                })
                
                local TextboxInput = CreateInstance("TextBox", {
                    Name = "Input",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 15, 0, 0),
                    Size = UDim2.new(1, -30, 1, 0),
                    Font = Enum.Font.Gotham,
                    PlaceholderText = placeholder,
                    Text = "",
                    TextColor3 = ParsedTheme.LightText,
                    PlaceholderColor3 = ParsedTheme.DarkText,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ClearTextOnFocus = false,
                    ZIndex = 2,
                    Parent = TextboxContainer
                })
                
                local ClearButton = CreateInstance("ImageButton", {
                    Name = "ClearButton",
                    AnchorPoint = Vector2.new(1, 0.5),
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -10, 0.5, 0),
                    Size = UDim2.new(0, 16, 0, 16),
                    Image = "rbxassetid://6031094677",
                    ImageColor3 = ParsedTheme.DarkText,
                    Visible = false,
                    ZIndex = 2,
                    Parent = TextboxContainer
                })
                
                local function UpdateClearButton()
                    ClearButton.Visible = TextboxInput.Text ~= ""
                end
                
                TextboxInput:GetPropertyChangedSignal("Text"):Connect(UpdateClearButton)
                
                TextboxInput.FocusLost:Connect(function(enterPressed)
                    if enterPressed then
                        callback(TextboxInput.Text)
                    end
                end)
                
                ClearButton.MouseButton1Click:Connect(function()
                    TextboxInput.Text = ""
                    TextboxInput:CaptureFocus()
                end)
                
                TextboxContainer.MouseEnter:Connect(function()
                    if TextboxInput:IsFocused() then return end
                    
                    CreateTween(
                        TextboxContainer,
                        {BackgroundColor3 = ParsedTheme.LightContrast},
                        0.3
                    ):Play()
                end)
                
                TextboxContainer.MouseLeave:Connect(function()
                    if TextboxInput:IsFocused() then return end
                    
                    CreateTween(
                        TextboxContainer,
                        {BackgroundColor3 = ParsedTheme.DarkContrast},
                        0.3
                    ):Play()
                end)
                
                TextboxInput.Focused:Connect(function()
                    CreateTween(
                        TextboxContainer,
                        {BackgroundColor3 = ParsedTheme.LightContrast},
                        0.3
                    ):Play()
                end)
                
                TextboxInput.FocusLost:Connect(function()
                    CreateTween(
                        TextboxContainer,
                        {BackgroundColor3 = ParsedTheme.DarkContrast},
                        0.3
                    ):Play()
                end)
                
                return {
                    GetText = function()
                        return TextboxInput.Text
                    end,
                    
                    SetText = function(newText)
                        TextboxInput.Text = newText
                        UpdateClearButton()
                    end,
                    
                    ClearText = function()
                        TextboxInput.Text = ""
                        UpdateClearButton()
                    end
                }
            end
            
            function Section:AddColorPicker(text, default, callback)
                default = default or Color3.fromRGB(255, 255, 255)
                callback = callback or function() end
                
                local color = default
                local open = false
                
                local ColorPickerFrame = CreateInstance("Frame", {
                    Name = "ColorPicker",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 40),
                    ZIndex = 2,
                    Parent = ElementsContainer
                })
                
                local ColorPickerLabel = CreateInstance("TextLabel", {
                    Name = "Label",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, -40, 0, 40),
                    Font = Enum.Font.GothamSemibold,
                    Text = text,
                    TextColor3 = ParsedTheme.LightText,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ZIndex = 2,
                    Parent = ColorPickerFrame
                })
                
                local ColorDisplay = CreateInstance("Frame", {
                    Name = "Display",
                    AnchorPoint = Vector2.new(1, 0.5),
                    BackgroundColor3 = color,
                    Position = UDim2.new(1, 0, 0.5, 0),
                    Size = UDim2.new(0, 30, 0, 30),
                    ZIndex = 2,
                    Parent = ColorPickerFrame
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = ColorDisplay
                })
                
                local ColorPickerButton = CreateInstance("TextButton", {
                    Name = "Button",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    Text = "",
                    ZIndex = 3,
                    Parent = ColorPickerFrame
                })
                
                local ColorPickerContent = CreateInstance("Frame", {
                    Name = "Content",
                    BackgroundColor3 = ParsedTheme.LightContrast,
                    Position = UDim2.new(0, 0, 1, 5),
                    Size = UDim2.new(1, 0, 0, 0),
                    ClipsDescendants = true,
                    Visible = false,
                    ZIndex = 3,
                    Parent = ColorPickerFrame
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = ColorPickerContent
                })
                
                local HueFrame = CreateInstance("Frame", {
                    Name = "Hue",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 10),
                    Size = UDim2.new(1, -20, 0, 20),
                    ZIndex = 3,
                    Parent = ColorPickerContent
                })
                
                local HueGradient = CreateInstance("Frame", {
                    Name = "Gradient",
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Size = UDim2.new(1, 0, 1, 0),
                    ZIndex = 3,
                    Parent = HueFrame
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = HueGradient
                })
                
                local HueGradientUIGradient = CreateInstance("UIGradient", {
                    Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                        ColorSequenceKeypoint.new(0.167, Color3.fromRGB(255, 255, 0)),
                        ColorSequenceKeypoint.new(0.333, Color3.fromRGB(0, 255, 0)),
                        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
                        ColorSequenceKeypoint.new(0.667, Color3.fromRGB(0, 0, 255)),
                        ColorSequenceKeypoint.new(0.833, Color3.fromRGB(255, 0, 255)),
                        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
                    }),
                    Parent = HueGradient
                })
                
                local HueSelector = CreateInstance("Frame", {
                    Name = "Selector",
                    AnchorPoint = Vector2.new(0.5, 0.5),
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Position = UDim2.new(0, 0, 0.5, 0),
                    Size = UDim2.new(0, 4, 1, 4),
                    ZIndex = 4,
                    Parent = HueFrame
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 2),
                    Parent = HueSelector
                })
                
                local SatValFrame = CreateInstance("Frame", {
                    Name = "SatVal",
                    BackgroundColor3 = Color3.fromRGB(255, 0, 0),
                    Position = UDim2.new(0, 10, 0, 40),
                    Size = UDim2.new(1, -20, 0, 150),
                    ZIndex = 3,
                    Parent = ColorPickerContent
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = SatValFrame
                })
                
                local SatGradient = CreateInstance("UIGradient", {
                    Color = ColorSequence.new(Color3.fromRGB(255, 255, 255), Color3.fromRGB(255, 0, 0)),
                    Transparency = NumberSequence.new(0, 0),
                    Rotation = 90,
                    Parent = SatValFrame
                })
                
                local ValGradient = CreateInstance("Frame", {
                    Name = "ValGradient",
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    BackgroundTransparency = 0,
                    Size = UDim2.new(1, 0, 1, 0),
                    ZIndex = 4,
                    Parent = SatValFrame
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = ValGradient
                })
                
                local ValGradientUIGradient = CreateInstance("UIGradient", {
                    Color = ColorSequence.new(Color3.fromRGB(0, 0, 0, 0), Color3.fromRGB(0, 0, 0)),
                    Transparency = NumberSequence.new(0, 1),
                    Rotation = 0,
                    Parent = ValGradient
                })
                
                local SatValSelector = CreateInstance("Frame", {
                    Name = "Selector",
                    AnchorPoint = Vector2.new(0.5, 0.5),
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    BackgroundTransparency = 0,
                    Position = UDim2.new(1, 0, 0, 0),
                    Size = UDim2.new(0, 10, 0, 10),
                    ZIndex = 5,
                    Parent = SatValFrame
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = SatValSelector
                })
                
                CreateInstance("UIStroke", {
                    Color = Color3.fromRGB(0, 0, 0),
                    Thickness = 1,
                    Parent = SatValSelector
                })
                
                local RgbFrame = CreateInstance("Frame", {
                    Name = "RGB",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 200),
                    Size = UDim2.new(1, -20, 0, 20),
                    ZIndex = 3,
                    Parent = ColorPickerContent
                })
                
                local RLabel = CreateInstance("TextLabel", {
                    Name = "R",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(0, 15, 1, 0),
                    Font = Enum.Font.GothamBold,
                    Text = "R:",
                    TextColor3 = ParsedTheme.LightText,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ZIndex = 3,
                    Parent = RgbFrame
                })
                
                local RValue = CreateInstance("TextLabel", {
                    Name = "Value",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 20, 0, 0),
                    Size = UDim2.new(0, 30, 1, 0),
                    Font = Enum.Font.Gotham,
                    Text = tostring(math.floor(color.R * 255)),
                    TextColor3 = ParsedTheme.DarkText,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ZIndex = 3,
                    Parent = RgbFrame
                })
                
                local GLabel = CreateInstance("TextLabel", {
                    Name = "G",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 60, 0, 0),
                    Size = UDim2.new(0, 15, 1, 0),
                    Font = Enum.Font.GothamBold,
                    Text = "G:",
                    TextColor3 = ParsedTheme.LightText,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ZIndex = 3,
                    Parent = RgbFrame
                })
                
                local GValue = CreateInstance("TextLabel", {
                    Name = "Value",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 80, 0, 0),
                    Size = UDim2.new(0, 30, 1, 0),
                    Font = Enum.Font.Gotham,
                    Text = tostring(math.floor(color.G * 255)),
                    TextColor3 = ParsedTheme.DarkText,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ZIndex = 3,
                    Parent = RgbFrame
                })
                
                local BLabel = CreateInstance("TextLabel", {
                    Name = "B",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 120, 0, 0),
                    Size = UDim2.new(0, 15, 1, 0),
                    Font = Enum.Font.GothamBold,
                    Text = "B:",
                    TextColor3 = ParsedTheme.LightText,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ZIndex = 3,
                    Parent = RgbFrame
                })
                
                local BValue = CreateInstance("TextLabel", {
                    Name = "Value",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 140, 0, 0),
                    Size = UDim2.new(0, 30, 1, 0),
                    Font = Enum.Font.Gotham,
                    Text = tostring(math.floor(color.B * 255)),
                    TextColor3 = ParsedTheme.DarkText,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ZIndex = 3,
                    Parent = RgbFrame
                })
                
                local ColorButton = CreateInstance("TextButton", {
                    Name = "Button",
                    AnchorPoint = Vector2.new(0.5, 0),
                    BackgroundColor3 = ParsedTheme.DarkContrast,
                    Position = UDim2.new(0.5, 0, 0, 230),
                    Size = UDim2.new(1, -20, 0, 35),
                    Font = Enum.Font.GothamSemibold,
                    Text = "Select Color",
                    TextColor3 = ParsedTheme.LightText,
                    TextSize = 14,
                    ZIndex = 3,
                    Parent = ColorPickerContent
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = ColorButton
                })
                
                AddRippleEffect(ColorButton, ParsedTheme.Accent)
                
                local hue, sat, val = Color3.toHSV(color)
                
                local draggingHue = false
                local draggingSatVal = false
                
                local function UpdateColor()
                    local newColor = Color3.fromHSV(hue, sat, val)
                    
                    SatValFrame.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
                    color = newColor
                    
                    SatValSelector.Position = UDim2.new(sat, 0, 1 - val, 0)
                    HueSelector.Position = UDim2.new(hue, 0, 0.5, 0)
                    
                    ColorDisplay.BackgroundColor3 = newColor
                    
                    RValue.Text = tostring(math.floor(newColor.R * 255))
                    GValue.Text = tostring(math.floor(newColor.G * 255))
                    BValue.Text = tostring(math.floor(newColor.B * 255))
                end
                
                HueGradient.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        draggingHue = true
                        
                        local percent = math.clamp((input.Position.X - HueGradient.AbsolutePosition.X) / HueGradient.AbsoluteSize.X, 0, 1)
                        hue = percent
                        
                        UpdateColor()
                    end
                end)
                
                HueGradient.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        draggingHue = false
                    end
                end)
                
                SatValFrame.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        draggingSatVal = true
                        
                        local xPercent = math.clamp((input.Position.X - SatValFrame.AbsolutePosition.X) / SatValFrame.AbsoluteSize.X, 0, 1)
                        local yPercent = math.clamp((input.Position.Y - SatValFrame.AbsolutePosition.Y) / SatValFrame.AbsoluteSize.Y, 0, 1)
                        
                        sat = xPercent
                        val = 1 - yPercent
                        
                        UpdateColor()
                    end
                end)
                
                SatValFrame.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        draggingSatVal = false
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if draggingHue and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                        local percent = math.clamp((input.Position.X - HueGradient.AbsolutePosition.X) / HueGradient.AbsoluteSize.X, 0, 1)
                        hue = percent
                        
                        UpdateColor()
                    elseif draggingSatVal and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                        local xPercent = math.clamp((input.Position.X - SatValFrame.AbsolutePosition.X) / SatValFrame.AbsoluteSize.X, 0, 1)
                        local yPercent = math.clamp((input.Position.Y - SatValFrame.AbsolutePosition.Y) / SatValFrame.AbsoluteSize.Y, 0, 1)
                        
                        sat = xPercent
                        val = 1 - yPercent
                        
                        UpdateColor()
                    end
                end)
                
                ColorPickerButton.MouseButton1Click:Connect(function()
                    open = not open
                    
                    if open then
                        ColorPickerContent.Visible = true
                        
                        CreateTween(
                            ColorPickerContent,
                            {Size = UDim2.new(1, 0, 0, 275)},
                            0.3,
                            Enum.EasingStyle.Quint
                        ):Play()
                        
                        ColorPickerFrame.Size = UDim2.new(1, 0, 0, 40 + 275 + 5)
                        UpdateTabSizes()
                    else
                        CreateTween(
                            ColorPickerContent,
                            {Size = UDim2.new(1, 0, 0, 0)},
                            0.3,
                            Enum.EasingStyle.Quint
                        ):Play()
                        
                        delay(0.3, function()
                            ColorPickerContent.Visible = false
                            ColorPickerFrame.Size = UDim2.new(1, 0, 0, 40)
                            UpdateTabSizes()
                        end)
                    end
                end)
                
                ColorButton.MouseButton1Click:Connect(function()
                    callback(color)
                    
                    open = false
                    
                    CreateTween(
                        ColorPickerContent,
                        {Size = UDim2.new(1, 0, 0, 0)},
                        0.3,
                        Enum.EasingStyle.Quint
                    ):Play()
                    
                    delay(0.3, function()
                        ColorPickerContent.Visible = false
                        ColorPickerFrame.Size = UDim2.new(1, 0, 0, 40)
                        UpdateTabSizes()
                    end)
                end)
                
                UpdateColor()
                
                return {
                    SetColor = function(newColor)
                        local newHue, newSat, newVal = Color3.toHSV(newColor)
                        hue, sat, val = newHue, newSat, newVal
                        UpdateColor()
                    end,
                    
                    GetColor = function()
                        return color
                    end
                }
            end
            
            return Section
        end
        
        return Tab
    end
    
    Window.MainFrame = MainFrame
    
    function Window:Notify(title, content, duration)
        duration = duration or 3
        
        local NotificationFrame = CreateInstance("Frame", {
            Name = "Notification",
            AnchorPoint = Vector2.new(1, 1),
            BackgroundColor3 = ParsedTheme.Notification,
            Position = UDim2.new(1, -20, 1, -20),
            Size = UDim2.new(0, 300, 0, 80),
            BackgroundTransparency = 1,
            ClipsDescendants = true,
            ZIndex = 100,
            Parent = ScreenGui
        })
        
        CreateInstance("UICorner", {
            CornerRadius = UDim.new(0, 10),
            Parent = NotificationFrame
        })
        
        local NotificationTitle = CreateInstance("TextLabel", {
            Name = "Title",
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 15, 0, 15),
            Size = UDim2.new(1, -30, 0, 20),
            Font = Enum.Font.GothamBold,
            Text = title,
            TextColor3 = ParsedTheme.LightText,
            TextSize = 16,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextTransparency = 1,
            ZIndex = 101,
            Parent = NotificationFrame
        })
        
        local NotificationContent = CreateInstance("TextLabel", {
            Name = "Content",
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 15, 0, 40),
            Size = UDim2.new(1, -30, 0, 20),
            Font = Enum.Font.Gotham,
            Text = content,
            TextColor3 = ParsedTheme.DarkText,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextTransparency = 1,
            ZIndex = 101,
            Parent = NotificationFrame
        })
        
        local NotificationProgress = CreateInstance("Frame", {
            Name = "Progress",
            BackgroundColor3 = ParsedTheme.Accent,
            Position = UDim2.new(0, 0, 1, -2),
            Size = UDim2.new(1, 0, 0, 2),
            ZIndex = 101,
            Parent = NotificationFrame
        })
        
        table.insert(Notifications, NotificationFrame)
        
        local function RepositionNotifications()
            for i, notification in ipairs(Notifications) do
                CreateTween(
                    notification,
                    {Position = UDim2.new(1, -20, 1, -20 - (i - 1) * 90)},
                    0.3,
                    Enum.EasingStyle.Quint
                ):Play()
            end
        end
        
        RepositionNotifications()
        
        CreateTween(
            NotificationFrame,
            {BackgroundTransparency = 0},
            0.3,
            Enum.EasingStyle.Quint
        ):Play()
        
        CreateTween(
            NotificationTitle,
            {TextTransparency = 0},
            0.3,
            Enum.EasingStyle.Quint
        ):Play()
        
        CreateTween(
            NotificationContent,
            {TextTransparency = 0},
            0.3,
            Enum.EasingStyle.Quint
        ):Play()
        
        CreateTween(
            NotificationProgress,
            {Size = UDim2.new(0, 0, 0, 2)},
            duration,
            Enum.EasingStyle.Linear
        ):Play()
        
        delay(duration, function()
            CreateTween(
                NotificationFrame,
                {BackgroundTransparency = 1},
                0.3,
                Enum.EasingStyle.Quint
            ):Play()
            
            CreateTween(
                NotificationTitle,
                {TextTransparency = 1},
                0.3,
                Enum.EasingStyle.Quint
            ):Play()
            
            CreateTween(
                NotificationContent,
                {TextTransparency = 1},
                0.3,
                Enum.EasingStyle.Quint
            ):Play()
            
            for i, notification in ipairs(Notifications) do
                if notification == NotificationFrame then
                    table.remove(Notifications, i)
                    break
                end
            end
            
            delay(0.3, function()
                NotificationFrame:Destroy()
                RepositionNotifications()
            end)
        end)
    end
    
    return Window
end

return ZENtrix