local ZENtrix = {}
ZENtrix.__index = ZENtrix

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local TextService = game:GetService("TextService")

-- Constants
local PLAYER = Players.LocalPlayer
local MOUSE = PLAYER:GetMouse()
local IS_MOBILE = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled
local IS_PC = UserInputService.KeyboardEnabled

-- Default Theme Colors
local COLORS = {
    Background = Color3.fromRGB(30, 30, 35),
    DarkContrast = Color3.fromRGB(22, 22, 26),
    LightContrast = Color3.fromRGB(40, 40, 45),
    TextColor = Color3.fromRGB(240, 240, 245),
    Accent = Color3.fromRGB(120, 70, 255), -- Purple accent
    AccentDarker = Color3.fromRGB(90, 50, 200),
    PlaceholderColor = Color3.fromRGB(180, 180, 190),
    Cancel = Color3.fromRGB(215, 60, 55),
    Confirm = Color3.fromRGB(60, 215, 60),
}

-- Animation Settings
local ANIMATION = {
    DefaultDuration = 0.25,
    DefaultEasingStyle = Enum.EasingStyle.Quint,
    DefaultEasingDirection = Enum.EasingDirection.Out,
    MinimizeDuration = 0.35,
    TabSwitchDuration = 0.2,
    NotificationDuration = 0.4,
    TooltipDuration = 0.2,
    DropdownDuration = 0.25,
}

-- UI Constraints
local UI = {
    MinWindowSize = Vector2.new(320, 280),
    CornerRadius = UDim.new(0, 6),
    TitleBarHeight = 36,
    ElementHeight = 36,
    ElementPadding = 6,
    ElementSpacing = 8,
    TabHeight = 32,
    ScrollBarWidth = 4,
    TooltipMaxWidth = 200,
    ZIndex = {
        Base = 1000,
        Elements = 1001,
        Dropdown = 1100,
        Notification = 1200,
        Tooltip = 1300,
    }
}

-- Utility Functions
local Utility = {}

-- Create smooth tween
function Utility:Tween(instance, properties, duration, style, direction, delay)
    local tweenInfo = TweenInfo.new(
        duration or ANIMATION.DefaultDuration,
        style or ANIMATION.DefaultEasingStyle,
        direction or ANIMATION.DefaultEasingDirection,
        0, -- RepeatCount
        false, -- Reverses
        delay or 0 -- DelayTime
    )
    
    local tween = TweenService:Create(instance, tweenInfo, properties)
    tween:Play()
    
    return tween
end

-- Round number to specified decimal places
function Utility:Round(number, decimalPlaces)
    local factor = 10 ^ (decimalPlaces or 0)
    return math.floor(number * factor + 0.5) / factor
end

-- Format numbers with commas
function Utility:FormatNumber(number)
    local formatted = tostring(number)
    local k
    while true do
        formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", "%1,%2")
        if k == 0 then break end
    end
    return formatted
end

-- Calculate text size
function Utility:GetTextSize(text, fontSize, font, maxWidth)
    return TextService:GetTextSize(text, fontSize, font, Vector2.new(maxWidth or 9999, 9999))
end

-- Convert RGB to HSV
function Utility:RGBtoHSV(color)
    local r, g, b = color.R, color.G, color.B
    local max, min = math.max(r, g, b), math.min(r, g, b)
    local h, s, v
    v = max
    
    local delta = max - min
    if max ~= 0 then
        s = delta / max
    else
        s = 0
        h = -1
        return h, s, v
    end
    
    if r == max then
        h = (g - b) / delta
    elseif g == max then
        h = 2 + (b - r) / delta
    else
        h = 4 + (r - g) / delta
    end
    
    h = h * 60
    if h < 0 then h = h + 360 end
    
    return h, s, v
end

-- Convert HSV to RGB
function Utility:HSVtoRGB(h, s, v)
    local r, g, b
    
    if s == 0 then
        r, g, b = v, v, v
    else
        local sector = math.floor(h / 60)
        local f = h / 60 - sector
        local p = v * (1 - s)
        local q = v * (1 - s * f)
        local t = v * (1 - s * (1 - f))
        
        if sector == 0 then
            r, g, b = v, t, p
        elseif sector == 1 then
            r, g, b = q, v, p
        elseif sector == 2 then
            r, g, b = p, v, t
        elseif sector == 3 then
            r, g, b = p, q, v
        elseif sector == 4 then
            r, g, b = t, p, v
        else
            r, g, b = v, p, q
        end
    end
    
    return Color3.new(r, g, b)
end

-- Create Elements
local Elements = {}

-- Create a frame with rounded corners
function Elements:CreateFrame(properties)
    local frame = Instance.new("Frame")
    
    for property, value in pairs(properties or {}) do
        frame[property] = value
    end
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UI.CornerRadius
    corner.Parent = frame
    
    return frame
end

-- Create a button with effects
function Elements:CreateButton(properties)
    local button = Instance.new("TextButton")
    
    -- Default properties
    button.Size = UDim2.new(1, 0, 0, UI.ElementHeight)
    button.BackgroundColor3 = COLORS.LightContrast
    button.BorderSizePixel = 0
    button.AutoButtonColor = false
    button.Font = Enum.Font.GothamSemibold
    button.TextSize = 14
    button.TextColor3 = COLORS.TextColor
    button.Text = "Button"
    
    -- Override with provided properties
    for property, value in pairs(properties or {}) do
        button[property] = value
    end
    
    -- Add corner
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UI.CornerRadius
    corner.Parent = button
    
    -- Add hover and click effects
    local hoverOverlay = Instance.new("Frame")
    hoverOverlay.Name = "HoverOverlay"
    hoverOverlay.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    hoverOverlay.BackgroundTransparency = 1
    hoverOverlay.BorderSizePixel = 0
    hoverOverlay.Size = UDim2.fromScale(1, 1)
    hoverOverlay.ZIndex = button.ZIndex + 1
    
    local overlayCorner = Instance.new("UICorner")
    overlayCorner.CornerRadius = UI.CornerRadius
    overlayCorner.Parent = hoverOverlay
    
    hoverOverlay.Parent = button
    
    button.MouseEnter:Connect(function()
        Utility:Tween(hoverOverlay, {BackgroundTransparency = 0.9}, 0.2)
    end)
    
    button.MouseLeave:Connect(function()
        Utility:Tween(hoverOverlay, {BackgroundTransparency = 1}, 0.2)
    end)
    
    button.MouseButton1Down:Connect(function()
        Utility:Tween(button, {BackgroundColor3 = COLORS.DarkContrast}, 0.1, Enum.EasingStyle.Quad)
    end)
    
    button.MouseButton1Up:Connect(function()
        Utility:Tween(button, {BackgroundColor3 = COLORS.LightContrast}, 0.1, Enum.EasingStyle.Quad)
    end)
    
    return button
end

-- Create a toggle switch
function Elements:CreateToggle(properties)
    local toggle = Instance.new("Frame")
    
    -- Default properties
    toggle.Size = UDim2.new(1, 0, 0, UI.ElementHeight)
    toggle.BackgroundColor3 = COLORS.LightContrast
    toggle.BorderSizePixel = 0
    
    -- Override with provided properties
    for property, value in pairs(properties or {}) do
        toggle[property] = value
    end
    
    -- Add corner
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UI.CornerRadius
    corner.Parent = toggle
    
    -- Create label
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Size = UDim2.new(1, -60, 1, 0)
    label.Position = UDim2.fromOffset(10, 0)
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.Gotham
    label.TextSize = 14
    label.TextColor3 = COLORS.TextColor
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Text = "Toggle"
    label.Parent = toggle
    
    -- Create switch background
    local switchBg = Instance.new("Frame")
    switchBg.Name = "SwitchBackground"
    switchBg.Size = UDim2.fromOffset(40, 20)
    switchBg.Position = UDim2.new(1, -50, 0.5, 0)
    switchBg.AnchorPoint = Vector2.new(0, 0.5)
    switchBg.BackgroundColor3 = COLORS.DarkContrast
    switchBg.BorderSizePixel = 0
    
    local switchCorner = Instance.new("UICorner")
    switchCorner.CornerRadius = UDim.new(1, 0)
    switchCorner.Parent = switchBg
    
    switchBg.Parent = toggle
    
    -- Create toggle indicator
    local indicator = Instance.new("Frame")
    indicator.Name = "Indicator"
    indicator.Size = UDim2.fromOffset(16, 16)
    indicator.Position = UDim2.fromOffset(2, 2)
    indicator.BackgroundColor3 = COLORS.TextColor
    indicator.BorderSizePixel = 0
    
    local indicatorCorner = Instance.new("UICorner")
    indicatorCorner.CornerRadius = UDim.new(1, 0)
    indicatorCorner.Parent = indicator
    
    indicator.Parent = switchBg
    
    -- Toggle state
    local toggled = false
    local toggleFunction = function() end
    
    -- Toggle function
    local function updateToggle()
        toggled = not toggled
        
        local targetPosition, targetColor
        
        if toggled then
            targetPosition = UDim2.fromOffset(22, 2)
            targetColor = COLORS.Accent
        else
            targetPosition = UDim2.fromOffset(2, 2)
            targetColor = COLORS.TextColor
        end
        
        Utility:Tween(indicator, {Position = targetPosition}, 0.2, Enum.EasingStyle.Quad)
        Utility:Tween(switchBg, {BackgroundColor3 = toggled and COLORS.AccentDarker or COLORS.DarkContrast}, 0.2)
        Utility:Tween(indicator, {BackgroundColor3 = targetColor}, 0.2)
        
        toggleFunction(toggled)
    end
    
    -- Input handling
    local function onClick()
        updateToggle()
    end
    
    -- Click detection
    toggle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            onClick()
        end
    end)
    
    -- Interface for toggle
    toggle.Toggled = toggled
    toggle.SetState = function(state)
        if toggled ~= state then
            updateToggle()
        end
    end
    toggle.OnChanged = function(callback)
        toggleFunction = callback
    end
    
    return toggle
end

-- Create a slider
function Elements:CreateSlider(properties)
    local slider = Instance.new("Frame")
    
    -- Default properties
    slider.Size = UDim2.new(1, 0, 0, UI.ElementHeight + 6)
    slider.BackgroundColor3 = COLORS.LightContrast
    slider.BorderSizePixel = 0
    
    -- Override with provided properties
    for property, value in pairs(properties or {}) do
        slider[property] = value
    end
    
    -- Add corner
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UI.CornerRadius
    corner.Parent = slider
    
    -- Create label and value
    local labelValue = Instance.new("TextLabel")
    labelValue.Name = "LabelValue"
    labelValue.Size = UDim2.new(1, -20, 0, UI.ElementHeight / 2)
    labelValue.Position = UDim2.fromOffset(10, 5)
    labelValue.BackgroundTransparency = 1
    labelValue.Font = Enum.Font.Gotham
    labelValue.TextSize = 14
    labelValue.TextColor3 = COLORS.TextColor
    labelValue.TextXAlignment = Enum.TextXAlignment.Left
    labelValue.Text = "Slider: 50"
    labelValue.Parent = slider
    
    -- Create slider bar
    local sliderBar = Instance.new("Frame")
    sliderBar.Name = "SliderBar"
    sliderBar.Size = UDim2.new(1, -20, 0, 6)
    sliderBar.Position = UDim2.new(0, 10, 0, UI.ElementHeight - 10)
    sliderBar.BackgroundColor3 = COLORS.DarkContrast
    sliderBar.BorderSizePixel = 0
    
    local barCorner = Instance.new("UICorner")
    barCorner.CornerRadius = UDim.new(1, 0)
    barCorner.Parent = sliderBar
    
    sliderBar.Parent = slider
    
    -- Create slider fill
    local sliderFill = Instance.new("Frame")
    sliderFill.Name = "SliderFill"
    sliderFill.Size = UDim2.new(0.5, 0, 1, 0)
    sliderFill.BackgroundColor3 = COLORS.Accent
    sliderFill.BorderSizePixel = 0
    
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(1, 0)
    fillCorner.Parent = sliderFill
    
    sliderFill.Parent = sliderBar
    
    -- Create slider knob
    local sliderKnob = Instance.new("Frame")
    sliderKnob.Name = "SliderKnob"
    sliderKnob.Size = UDim2.fromOffset(12, 12)
    sliderKnob.Position = UDim2.new(0.5, 0, 0.5, 0)
    sliderKnob.AnchorPoint = Vector2.new(0.5, 0.5)
    sliderKnob.BackgroundColor3 = COLORS.TextColor
    sliderKnob.BorderSizePixel = 0
    
    local knobCorner = Instance.new("UICorner")
    knobCorner.CornerRadius = UDim.new(1, 0)
    knobCorner.Parent = sliderKnob
    
    -- Add a glow effect to the knob
    local knobGlow = Instance.new("UIStroke")
    knobGlow.Name = "KnobGlow"
    knobGlow.Color = COLORS.Accent
    knobGlow.Thickness = 1
    knobGlow.Transparency = 0.5
    knobGlow.Parent = sliderKnob
    
    sliderKnob.Parent = sliderBar
    
    -- Slider functionality
    local min, max, defaultValue = 0, 100, 50
    local value = defaultValue
    local valueChangedFunction = function() end
    
    -- Update slider visual
    local function updateSlider(val)
        value = math.clamp(val, min, max)
        local percent = (value - min) / (max - min)
        
        Utility:Tween(sliderFill, {Size = UDim2.fromScale(percent, 1)}, 0.1, Enum.EasingStyle.Quad)
        sliderKnob.Position = UDim2.new(percent, 0, 0.5, 0)
        labelValue.Text = "Slider: " .. tostring(math.round(value))
        
        valueChangedFunction(value)
    end
    
    -- Handle slider interaction
    local isDragging = false
    
    sliderBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = true
            
            local absolutePos = sliderBar.AbsolutePosition
            local absoluteSize = sliderBar.AbsoluteSize
            local relativePos = input.Position.X - absolutePos.X
            
            local percent = math.clamp(relativePos / absoluteSize.X, 0, 1)
            local newValue = min + (max - min) * percent
            
            updateSlider(newValue)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if isDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local absolutePos = sliderBar.AbsolutePosition
            local absoluteSize = sliderBar.AbsoluteSize
            local relativePos = input.Position.X - absolutePos.X
            
            local percent = math.clamp(relativePos / absoluteSize.X, 0, 1)
            local newValue = min + (max - min) * percent
            
            updateSlider(newValue)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = false
        end
    end)
    
    -- Interface for slider
    slider.Value = value
    slider.SetMinMax = function(newMin, newMax)
        min, max = newMin, newMax
        updateSlider(value)
    end
    slider.SetValue = function(newValue)
        updateSlider(newValue)
    end
    slider.OnChanged = function(callback)
        valueChangedFunction = callback
    end
    
    -- Initialize
    updateSlider(defaultValue)
    
    return slider
end

-- Create a dropdown menu
function Elements:CreateDropdown(properties)
    local dropdown = Instance.new("Frame")
    
    -- Default properties
    dropdown.Size = UDim2.new(1, 0, 0, UI.ElementHeight)
    dropdown.BackgroundColor3 = COLORS.LightContrast
    dropdown.BorderSizePixel = 0
    dropdown.ClipsDescendants = true
    
    -- Override with provided properties
    for property, value in pairs(properties or {}) do
        dropdown[property] = value
    end
    
    -- Add corner
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UI.CornerRadius
    corner.Parent = dropdown
    
    -- Create header
    local header = Instance.new("TextButton")
    header.Name = "Header"
    header.Size = UDim2.new(1, 0, 0, UI.ElementHeight)
    header.BackgroundTransparency = 1
    header.Font = Enum.Font.Gotham
    header.TextSize = 14
    header.TextColor3 = COLORS.TextColor
    header.TextXAlignment = Enum.TextXAlignment.Left
    header.Text = "  Dropdown"
    header.Parent = dropdown
    
    -- Create arrow indicator
    local arrow = Instance.new("ImageLabel")
    arrow.Name = "Arrow"
    arrow.Size = UDim2.fromOffset(20, 20)
    arrow.Position = UDim2.new(1, -25, 0, 8)
    arrow.BackgroundTransparency = 1
    arrow.Image = "rbxassetid://6031091004" -- Down arrow
    arrow.ImageColor3 = COLORS.TextColor
    arrow.Parent = header
    
    -- Create options container
    local optionsContainer = Instance.new("ScrollingFrame")
    optionsContainer.Name = "OptionsContainer"
    optionsContainer.Size = UDim2.new(1, 0, 0, 0)
    optionsContainer.Position = UDim2.new(0, 0, 0, UI.ElementHeight)
    optionsContainer.BackgroundTransparency = 1
    optionsContainer.BorderSizePixel = 0
    optionsContainer.ScrollBarThickness = 4
    optionsContainer.ScrollBarImageColor3 = COLORS.Accent
    optionsContainer.VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Right
    optionsContainer.Visible = true
    optionsContainer.Parent = dropdown
    
    -- Create dropdown options list
    local optionsList = Instance.new("UIListLayout")
    optionsList.Name = "OptionsList"
    optionsList.SortOrder = Enum.SortOrder.LayoutOrder
    optionsList.Padding = UDim.new(0, 2)
    optionsList.Parent = optionsContainer
    
    optionsList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        optionsContainer.CanvasSize = UDim2.new(0, 0, 0, optionsList.AbsoluteContentSize.Y)
    end)
    
    -- Dropdown state and data
    local isOpen = false
    local options = {}
    local selectedOption = nil
    local selectionChangedFunction = function() end
    
    -- Open/Close dropdown
    local function toggleDropdown()
        isOpen = not isOpen
        
        local targetSize, targetRotation
        
        if isOpen then
            -- Calculate height based on options (max 5 items visible)
            local contentHeight = math.min(#options * (UI.ElementHeight - 2), 5 * (UI.ElementHeight - 2))
            targetSize = UDim2.new(1, 0, 0, UI.ElementHeight + contentHeight + 2)
            targetRotation = 180
        else
            targetSize = UDim2.new(1, 0, 0, UI.ElementHeight)
            targetRotation = 0
        end
        
        -- Animate the dropdown
        Utility:Tween(dropdown, {Size = targetSize}, ANIMATION.DropdownDuration, Enum.EasingStyle.Quint)
        Utility:Tween(arrow, {Rotation = targetRotation}, ANIMATION.DropdownDuration, Enum.EasingStyle.Quad)
    end
    
    -- Add a new option
    local function addOption(optionText)
        local option = Instance.new("TextButton")
        option.Name = "Option_" .. optionText
        option.Size = UDim2.new(1, 0, 0, UI.ElementHeight - 2)
        option.BackgroundColor3 = COLORS.DarkContrast
        option.BackgroundTransparency = 0.5
        option.BorderSizePixel = 0
        option.Font = Enum.Font.Gotham
        option.TextSize = 14
        option.TextColor3 = COLORS.TextColor
        option.Text = "  " .. optionText
        option.TextXAlignment = Enum.TextXAlignment.Left
        option.Parent = optionsContainer
        
        -- Add corner to option
        local optionCorner = Instance.new("UICorner")
        optionCorner.CornerRadius = UDim.new(0, 4)
        optionCorner.Parent = option
        
        -- Handle option selection
        option.MouseEnter:Connect(function()
            Utility:Tween(option, {BackgroundTransparency = 0.2}, 0.1)
        end)
        
        option.MouseLeave:Connect(function()
            Utility:Tween(option, {BackgroundTransparency = 0.5}, 0.1)
        end)
        
        option.MouseButton1Click:Connect(function()
            selectedOption = optionText
            header.Text = "  " .. optionText
            toggleDropdown()
            selectionChangedFunction(selectedOption)
        end)
        
        table.insert(options, optionText)
    end
    
    -- Toggle dropdown on header click
    header.MouseButton1Click:Connect(toggleDropdown)
    
    -- API for the dropdown
    dropdown.SetOptions = function(optionsList)
        -- Clear existing options
        for _, child in pairs(optionsContainer:GetChildren()) do
            if child:IsA("TextButton") then
                child:Destroy()
            end
        end
        
        options = {}
        
        -- Add new options
        for _, option in ipairs(optionsList) do
            addOption(option)
        end
    end
    
    dropdown.Select = function(option)
        if table.find(options, option) then
            selectedOption = option
            header.Text = "  " .. option
            selectionChangedFunction(selectedOption)
        end
    end
    
    dropdown.GetSelection = function()
        return selectedOption
    end
    
    dropdown.OnSelectionChanged = function(callback)
        selectionChangedFunction = callback
    end
    
    return dropdown
end

-- Create a window
function ZENtrix:CreateWindow(title, size)
    local window = {}
    
    -- Default size if not provided
    size = size or UDim2.fromOffset(400, 350)
    title = title or "ZENtrix Library"
    
    -- Create the main GUI container
    local container = Instance.new("ScreenGui")
    container.Name = "ZENtrix_" .. title:gsub("%s+", "_")
    container.ResetOnSpawn = false
    container.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Try to parent to CoreGui, fallback to PlayerGui
    local success, result = pcall(function()
        if syn and syn.protect_gui then
            syn.protect_gui(container)
            container.Parent = CoreGui
        else
            container.Parent = CoreGui
        end
    end)
    
    if not success then
        container.Parent = PLAYER:WaitForChild("PlayerGui")
    end
    
    -- Create the main window frame
    local mainFrame = Elements:CreateFrame({
        Name = "MainFrame",
        Size = size,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = COLORS.Background,
        BorderSizePixel = 0,
        Parent = container
    })
    
    -- Add drop shadow
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.Size = UDim2.new(1, 40, 1, 40)
    shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxassetid://6014261993"
    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    shadow.ImageTransparency = 0.5
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(49, 49, 450, 450)
    shadow.ZIndex = mainFrame.ZIndex - 1
    shadow.Parent = mainFrame
    
    -- Create title bar
    local titleBar = Elements:CreateFrame({
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, UI.TitleBarHeight),
        BackgroundColor3 = COLORS.DarkContrast,
        BorderSizePixel = 0,
        Parent = mainFrame
    })
    
    -- Create title text
    local titleText = Instance.new("TextLabel")
    titleText.Name = "Title"
    titleText.Size = UDim2.new(1, -100, 1, 0)
    titleText.Position = UDim2.fromOffset(10, 0)
    titleText.BackgroundTransparency = 1
    titleText.Font = Enum.Font.GothamBold
    titleText.TextSize = 15
    titleText.TextColor3 = COLORS.TextColor
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    titleText.Text = title
    titleText.Parent = titleBar
    
    -- Create minimize button
    local minimizeButton = Instance.new("TextButton")
    minimizeButton.Name = "MinimizeButton"
    minimizeButton.Size = UDim2.fromOffset(24, 24)
    minimizeButton.Position = UDim2.new(1, -60, 0, 6)
    minimizeButton.BackgroundTransparency = 1
    minimizeButton.Font = Enum.Font.GothamBold
    minimizeButton.TextSize = 20
    minimizeButton.TextColor3 = COLORS.TextColor
    minimizeButton.Text = "-"
    minimizeButton.Parent = titleBar
    
    -- Create close button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.fromOffset(24, 24)
    closeButton.Position = UDim2.new(1, -30, 0, 6)
    closeButton.BackgroundTransparency = 1
    closeButton.Font = Enum.Font.GothamBold
    closeButton.TextSize = 20
    closeButton.TextColor3 = COLORS.Cancel
    closeButton.Text = "×"
    closeButton.Parent = titleBar
    
    -- Create tabs bar
    local tabsBar = Elements:CreateFrame({
        Name = "TabsBar",
        Size = UDim2.new(1, 0, 0, UI.TabHeight),
        Position = UDim2.new(0, 0, 0, UI.TitleBarHeight),
        BackgroundColor3 = COLORS.DarkContrast,
        BackgroundTransparency = 0.4,
        BorderSizePixel = 0,
        Parent = mainFrame
    })
    
    -- Create tabs container
    local tabsContainer = Instance.new("ScrollingFrame")
    tabsContainer.Name = "TabsContainer"
    tabsContainer.Size = UDim2.new(1, 0, 1, 0)
    tabsContainer.BackgroundTransparency = 1
    tabsContainer.BorderSizePixel = 0
    tabsContainer.ScrollBarThickness = 0
    tabsContainer.ScrollingDirection = Enum.ScrollingDirection.X
    tabsContainer.Parent = tabsBar
    
    -- Create tabs layout
    local tabsLayout = Instance.new("UIListLayout")
    tabsLayout.Name = "TabsLayout"
    tabsLayout.FillDirection = Enum.FillDirection.Horizontal
    tabsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabsLayout.Padding = UDim.new(0, 5)
    tabsLayout.Parent = tabsContainer
    
    -- Create tabs padding
    local tabsPadding = Instance.new("UIPadding")
    tabsPadding.PaddingLeft = UDim.new(0, 5)
    tabsPadding.PaddingRight = UDim.new(0, 5)
    tabsPadding.Parent = tabsContainer
    
    -- Create content container
    local contentContainer = Instance.new("Frame")
    contentContainer.Name = "ContentContainer"
    contentContainer.Size = UDim2.new(1, 0, 1, -(UI.TitleBarHeight + UI.TabHeight))
    contentContainer.Position = UDim2.new(0, 0, 0, UI.TitleBarHeight + UI.TabHeight)
    contentContainer.BackgroundTransparency = 1
    contentContainer.BorderSizePixel = 0
    contentContainer.ClipsDescendants = true
    contentContainer.Parent = mainFrame
    
    -- Track window state
    local windowStates = {
        minimized = false,
        dragging = false,
        originalSize = size,
        originalPosition = UDim2.new(0.5, 0, 0.5, 0),
        dragOffset = Vector2.new(0, 0),
        tabs = {},
        activeTab = nil
    }
    
    -- Function to minimize/restore the window
    local function toggleMinimize()
        windowStates.minimized = not windowStates.minimized
        
        local targetSize
        
        if windowStates.minimized then
            -- Save original size and minimize
            windowStates.originalSize = mainFrame.Size
            targetSize = UDim2.new(windowStates.originalSize.X.Scale, windowStates.originalSize.X.Offset, 0, UI.TitleBarHeight)
        else
            -- Restore original size
            targetSize = windowStates.originalSize
        end
        
        -- Animate the transition
        Utility:Tween(mainFrame, {Size = targetSize}, ANIMATION.MinimizeDuration, Enum.EasingStyle.Quint)
        
        -- Toggle content visibility
        for _, tab in pairs(windowStates.tabs) do
            tab.Content.Visible = not windowStates.minimized and tab == windowStates.activeTab
        end
        
        -- Toggle tabs bar visibility
        contentContainer.Visible = not windowStates.minimized
        tabsBar.Visible = not windowStates.minimized
    end
    
    -- Function to make the window draggable
    local function makeDraggable()
        local dragInput, dragStart
        
        titleBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                windowStates.dragging = true
                dragStart = input.Position
                windowStates.dragOffset = mainFrame.Position - UDim2.fromOffset(dragStart.X, dragStart.Y)
                
                -- Start dragging animation
                Utility:Tween(mainFrame, {BackgroundColor3 = COLORS.Background:Lerp(COLORS.LightContrast, 0.05)}, 0.2)
                
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        windowStates.dragging = false
                        -- End dragging animation
                        Utility:Tween(mainFrame, {BackgroundColor3 = COLORS.Background}, 0.2)
                    end
                end)
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if windowStates.dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                local targetPosition = UDim2.fromOffset(
                    input.Position.X + windowStates.dragOffset.X.Offset,
                    input.Position.Y + windowStates.dragOffset.Y.Offset
                )
                
                -- Super smooth dragging with a slight delay
                Utility:Tween(mainFrame, {Position = targetPosition}, 0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            end
        end)
    end
    
    -- Create mobile toggle button if on mobile
    if IS_MOBILE then
        local mobileToggle = Elements:CreateButton({
            Name = "MobileToggle",
            Size = UDim2.fromOffset(50, 50),
            Position = UDim2.new(0, 20, 0, 20),
            BackgroundColor3 = COLORS.Accent,
            BackgroundTransparency = 0.2,
            Text = "≡",
            TextSize = 30,
            Parent = container
        })
        
        -- Mobile visibility toggle
        local mobileVisible = true
        
        mobileToggle.MouseButton1Click:Connect(function()
            mobileVisible = not mobileVisible
            mainFrame.Visible = mobileVisible
        end)
        
        -- Make mobile toggle draggable
        local toggleDragging = false
        local toggleDragStart
        
        mobileToggle.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                toggleDragging = true
                toggleDragStart = input.Position
                
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        toggleDragging = false
                    end
                end)
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if toggleDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                local delta = input.Position - toggleDragStart
                mobileToggle.Position = UDim2.new(
                    0,
                    math.clamp(mobileToggle.Position.X.Offset + delta.X, 10, container.AbsoluteSize.X - 60),
                    0,
                    math.clamp(mobileToggle.Position.Y.Offset + delta.Y, 10, container.AbsoluteSize.Y - 60)
                )
                toggleDragStart = input.Position
            end
        end)
    end
    
    -- Set up window controls
    closeButton.MouseButton1Click:Connect(function()
        Utility:Tween(mainFrame, {BackgroundTransparency = 1}, 0.5)
        Utility:Tween(shadow, {ImageTransparency = 1}, 0.5)
        
        -- Wait for animation then destroy
        task.delay(0.5, function()
            container:Destroy()
        end)
    end)
    
    minimizeButton.MouseButton1Click:Connect(toggleMinimize)
    
    -- Set up dragging
    makeDraggable()
    
    -- Update tabs layout
    tabsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        tabsContainer.CanvasSize = UDim2.new(0, tabsLayout.AbsoluteContentSize.X, 0, 0)
    end)
    
    -- Tab functions
    function window:CreateTab(tabTitle)
        local tab = {}
        
        -- Create tab button
        local tabButton = Instance.new("TextButton")
        tabButton.Name = "Tab_" .. tabTitle
        tabButton.Size = UDim2.new(0, TextService:GetTextSize(tabTitle, 14, Enum.Font.Gotham, Vector2.new(1000, 100)).X + 20, 1, -2)
        tabButton.Position = UDim2.fromOffset(0, 1)
        tabButton.BackgroundColor3 = COLORS.DarkContrast
        tabButton.BackgroundTransparency = 0.5
        tabButton.BorderSizePixel = 0
        tabButton.Font = Enum.Font.Gotham
        tabButton.TextSize = 14
        tabButton.TextColor3 = COLORS.TextColor
        tabButton.Text = tabTitle
        tabButton.Parent = tabsContainer
        
        -- Add corner to tab button
        local tabCorner = Instance.new("UICorner")
        tabCorner.CornerRadius = UDim.new(0, 4)
        tabCorner.Parent = tabButton
        
        -- Create tab content
        local tabContent = Instance.new("ScrollingFrame")
        tabContent.Name = "Content_" .. tabTitle
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.BackgroundTransparency = 1
        tabContent.BorderSizePixel = 0
        tabContent.ScrollBarThickness = UI.ScrollBarWidth
        tabContent.ScrollBarImageColor3 = COLORS.Accent
        tabContent.VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Right
        tabContent.Visible = false
        tabContent.Parent = contentContainer
        
        -- Add padding to tab content
        local contentPadding = Instance.new("UIPadding")
        contentPadding.PaddingLeft = UDim.new(0, 10)
        contentPadding.PaddingRight = UDim.new(0, 10)
        contentPadding.PaddingTop = UDim.new(0, 10)
        contentPadding.PaddingBottom = UDim.new(0, 10)
        contentPadding.Parent = tabContent
        
        -- Add layout to tab content
        local contentLayout = Instance.new("UIListLayout")
        contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        contentLayout.Padding = UDim.new(0, UI.ElementSpacing)
        contentLayout.Parent = tabContent
        
        -- Update content size when layout changes
        contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tabContent.CanvasSize = UDim2.new(0, 0, 0, contentLayout.AbsoluteContentSize.Y + 20)
        end)
        
        -- Add tab to window
        tab.Button = tabButton
        tab.Content = tabContent
        tab.Title = tabTitle
        
        table.insert(windowStates.tabs, tab)
        
        -- Activate this tab if it's the first one
        if #windowStates.tabs == 1 then
            tabButton.BackgroundColor3 = COLORS.Accent
            tabButton.BackgroundTransparency = 0
            tabContent.Visible = true
            windowStates.activeTab = tab
        end
        
        -- Tab button click behavior
        tabButton.MouseButton1Click:Connect(function()
            -- Skip if already active
            if windowStates.activeTab == tab then return end
            
            -- Deactivate current tab
            if windowStates.activeTab then
                Utility:Tween(windowStates.activeTab.Button, {BackgroundColor3 = COLORS.DarkContrast, BackgroundTransparency = 0.5}, ANIMATION.TabSwitchDuration)
                windowStates.activeTab.Content.Visible = false
            end
            
            -- Activate new tab
            Utility:Tween(tabButton, {BackgroundColor3 = COLORS.Accent, BackgroundTransparency = 0}, ANIMATION.TabSwitchDuration)
            tabContent.Visible = true
            windowStates.activeTab = tab
        end)
        
        -- Element creation functions
        function tab:AddLabel(text)
            local label = Instance.new("TextLabel")
            label.Name = "Label_" .. text:gsub("%s+", "_")
            label.Size = UDim2.new(1, 0, 0, UI.ElementHeight)
            label.BackgroundTransparency = 1
            label.Font = Enum.Font.Gotham
            label.TextSize = 14
            label.TextColor3 = COLORS.TextColor
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Text = text
            label.Parent = tabContent
            
            -- Update function
            local labelObj = {
                Instance = label,
                SetText = function(self, newText)
                    label.Text = newText
                end
            }
            
            return labelObj
        end
        
        function tab:AddButton(text, callback)
            local button = Elements:CreateButton({
                Text = text,
                Parent = tabContent
            })
            
            button.MouseButton1Click:Connect(function()
                callback()
            end)
            
            -- Return button object with API
            local buttonObj = {
                Instance = button,
                SetText = function(self, newText)
                    button.Text = newText
                end
            }
            
            return buttonObj
        end
        
        function tab:AddToggle(text, defaultState, callback)
            local toggle = Elements:CreateToggle({
                Parent = tabContent
            })
            
            toggle.Label.Text = text
            
            if defaultState then
                toggle:SetState(defaultState)
            end
            
            toggle:OnChanged(callback or function() end)
            
            -- Return toggle object with API
            local toggleObj = {
                Instance = toggle,
                SetState = function(self, state)
                    toggle:SetState(state)
                end,
                GetState = function(self)
                    return toggle.Toggled
                end
            }
            
            return toggleObj
        end
        
        function tab:AddSlider(text, min, max, defaultValue, callback)
            local slider = Elements:CreateSlider({
                Parent = tabContent
            })
            
            slider.LabelValue.Text = text .. ": " .. (defaultValue or 50)
            slider:SetMinMax(min or 0, max or 100)
            slider:SetValue(defaultValue or 50)
            
            slider:OnChanged(callback or function() end)
            
            -- Return slider object with API
            local sliderObj = {
                Instance = slider,
                SetValue = function(self, value)
                    slider:SetValue(value)
                end,
                GetValue = function(self)
                    return slider.Value
                end
            }
            
            return sliderObj
        end
        
        function tab:AddDropdown(text, options, defaultOption, callback)
            local dropdown = Elements:CreateDropdown({
                Parent = tabContent
            })
            
            dropdown.Header.Text = "  " .. text
            dropdown:SetOptions(options or {})
            
            if defaultOption then
                dropdown:Select(defaultOption)
            end
            
            dropdown:OnSelectionChanged(callback or function() end)
            
            -- Return dropdown object with API
            local dropdownObj = {
                Instance = dropdown,
                SetOptions = function(self, newOptions)
                    dropdown:SetOptions(newOptions)
                end,
                Select = function(self, option)
                    dropdown:Select(option)
                end,
                GetSelection = function(self)
                    return dropdown:GetSelection()
                end
            }
            
            return dropdownObj
        end
        
        function tab:AddColorPicker(text, defaultColor, callback)
            local colorPickerContainer = Elements:CreateFrame({
                Size = UDim2.new(1, 0, 0, UI.ElementHeight),
                BackgroundColor3 = COLORS.LightContrast,
                Parent = tabContent
            })
            
            -- Add label
            local label = Instance.new("TextLabel")
            label.Name = "Label"
            label.Size = UDim2.new(1, -60, 1, 0)
            label.Position = UDim2.fromOffset(10, 0)
            label.BackgroundTransparency = 1
            label.Font = Enum.Font.Gotham
            label.TextSize = 14
            label.TextColor3 = COLORS.TextColor
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Text = text or "Color"
            label.Parent = colorPickerContainer
            
            -- Add color display
            local colorDisplay = Instance.new("Frame")
            colorDisplay.Name = "ColorDisplay"
            colorDisplay.Size = UDim2.fromOffset(30, 20)
            colorDisplay.Position = UDim2.new(1, -40, 0.5, 0)
            colorDisplay.AnchorPoint = Vector2.new(0, 0.5)
            colorDisplay.BackgroundColor3 = defaultColor or Color3.fromRGB(255, 255, 255)
            colorDisplay.BorderSizePixel = 0
            colorDisplay.Parent = colorPickerContainer
            
            -- Add corner to color display
            local displayCorner = Instance.new("UICorner")
            displayCorner.CornerRadius = UDim.new(0, 4)
            displayCorner.Parent = colorDisplay
            
            -- Create color picker popup
            local pickerPopup = Elements:CreateFrame({
                Size = UDim2.fromOffset(230, 260),
                Position = UDim2.new(1, 10, 0, 0),
                BackgroundColor3 = COLORS.Background,
                Visible = false,
                ZIndex = UI.ZIndex.Dropdown,
                Parent = colorPickerContainer
            })
            
            -- Add shadow to popup
            local popupShadow = Instance.new("ImageLabel")
            popupShadow.Name = "Shadow"
            popupShadow.Size = UDim2.new(1, 20, 1, 20)
            popupShadow.Position = UDim2.fromScale(0.5, 0.5)
            popupShadow.AnchorPoint = Vector2.new(0.5, 0.5)
            popupShadow.BackgroundTransparency = 1
            popupShadow.Image = "rbxassetid://6014261993"
            popupShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
            popupShadow.ImageTransparency = 0.5
            popupShadow.ScaleType = Enum.ScaleType.Slice
            popupShadow.SliceCenter = Rect.new(49, 49, 450, 450)
            popupShadow.ZIndex = pickerPopup.ZIndex - 1
            popupShadow.Parent = pickerPopup
            
            -- Color picker components
            local hueBar = Instance.new("ImageButton")
            hueBar.Name = "HueBar"
            hueBar.Size = UDim2.new(1, -20, 0, 20)
            hueBar.Position = UDim2.new(0, 10, 0, 200)
            hueBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            hueBar.BorderSizePixel = 0
            hueBar.Image = "rbxassetid://6523286724"
            hueBar.ZIndex = pickerPopup.ZIndex + 1
            hueBar.Parent = pickerPopup
            
            -- Add corner to hue bar
            local hueCorner = Instance.new("UICorner")
            hueCorner.CornerRadius = UDim.new(0, 4)
            hueCorner.Parent = hueBar
            
            -- Hue selector indicator
            local hueSelector = Instance.new("Frame")
            hueSelector.Name = "HueSelector"
            hueSelector.Size = UDim2.fromOffset(4, 20)
            hueSelector.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            hueSelector.BorderSizePixel = 0
            hueSelector.ZIndex = hueBar.ZIndex + 1
            hueSelector.Parent = hueBar
            
            -- Saturation/Value square
            local satValBox = Instance.new("ImageButton")
            satValBox.Name = "SatValBox"
            satValBox.Size = UDim2.new(1, -20, 0, 180)
            satValBox.Position = UDim2.new(0, 10, 0, 10)
            satValBox.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            satValBox.BorderSizePixel = 0
            satValBox.Image = "rbxassetid://6523291212"
            satValBox.ZIndex = pickerPopup.ZIndex + 1
            satValBox.Parent = pickerPopup
            
            -- Add corner to saturation/value box
            local satValCorner = Instance.new("UICorner")
            satValCorner.CornerRadius = UDim.new(0, 4)
            satValCorner.Parent = satValBox
            
            -- Saturation/Value selector
            local satValSelector = Instance.new("Frame")
            satValSelector.Name = "SatValSelector"
            satValSelector.Size = UDim2.fromOffset(8, 8)
            satValSelector.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            satValSelector.BorderSizePixel = 0
            satValSelector.AnchorPoint = Vector2.new(0.5, 0.5)
            satValSelector.ZIndex = satValBox.ZIndex + 1
            satValSelector.Parent = satValBox
            
            -- Add corner to selector
            local selectorCorner = Instance.new("UICorner")
            selectorCorner.CornerRadius = UDim.new(1, 0)
            selectorCorner.Parent = satValSelector
            
            -- RGB display
            local rgbDisplay = Instance.new("TextLabel")
            rgbDisplay.Name = "RGBDisplay"
            rgbDisplay.Size = UDim2.new(1, -20, 0, 30)
            rgbDisplay.Position = UDim2.new(0, 10, 0, 230)
            rgbDisplay.BackgroundColor3 = COLORS.DarkContrast
            rgbDisplay.BorderSizePixel = 0
            rgbDisplay.Font = Enum.Font.Gotham
            rgbDisplay.TextSize = 14
            rgbDisplay.TextColor3 = COLORS.TextColor
            rgbDisplay.Text = "RGB: 255, 255, 255"
            rgbDisplay.ZIndex = pickerPopup.ZIndex + 1
            rgbDisplay.Parent = pickerPopup
            
            -- Add corner to RGB display
            local rgbCorner = Instance.new("UICorner")
            rgbCorner.CornerRadius = UDim.new(0, 4)
            rgbCorner.Parent = rgbDisplay
            
            -- Color picker state
            local pickerState = {
                hue = 0,
                sat = 1,
                val = 1,
                color = defaultColor or Color3.fromRGB(255, 255, 255),
                open = false
            }
            
            -- Helper function to update color from HSV
            local function updateColor()
                pickerState.color = Utility:HSVtoRGB(pickerState.hue, pickerState.sat, pickerState.val)
                colorDisplay.BackgroundColor3 = pickerState.color
                satValBox.BackgroundColor3 = Utility:HSVtoRGB(pickerState.hue, 1, 1)
                
                -- Update RGB display
                local r = math.round(pickerState.color.R * 255)
                local g = math.round(pickerState.color.G * 255)
                local b = math.round(pickerState.color.B * 255)
                rgbDisplay.Text = ("RGB: %d, %d, %d"):format(r, g, b)
                
                if callback then
                    callback(pickerState.color)
                end
            end
            
            -- Initialize HSV from default color
            if defaultColor then
                pickerState.hue, pickerState.sat, pickerState.val = Utility:RGBtoHSV(defaultColor)
                hueSelector.Position = UDim2.new(pickerState.hue / 360, -2, 0, 0)
                satValSelector.Position = UDim2.new(pickerState.sat, 0, 1 - pickerState.val, 0)
                updateColor()
            end
            
            -- Toggle color picker
            local function togglePicker()
                pickerState.open = not pickerState.open
                pickerPopup.Visible = pickerState.open
            end
            
            -- Handle hue bar interaction
            local isDraggingHue = false
            
            hueBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    isDraggingHue = true
                    
                    -- Update hue based on input position
                    local pos = (input.Position.X - hueBar.AbsolutePosition.X) / hueBar.AbsoluteSize.X
                    pos = math.clamp(pos, 0, 1)
                    pickerState.hue = pos * 360
                    hueSelector.Position = UDim2.new(pos, -2, 0, 0)
                    
                    updateColor()
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if isDraggingHue and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                    -- Update hue based on input position
                    local pos = (input.Position.X - hueBar.AbsolutePosition.X) / hueBar.AbsoluteSize.X
                    pos = math.clamp(pos, 0, 1)
                    pickerState.hue = pos * 360
                    hueSelector.Position = UDim2.new(pos, -2, 0, 0)
                    
                    updateColor()
                end
            end)
            
            -- Handle saturation/value box interaction
            local isDraggingSatVal = false
            
            satValBox.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    isDraggingSatVal = true
                    
                    -- Update sat/val based on input position
                    local posX = (input.Position.X - satValBox.AbsolutePosition.X) / satValBox.AbsoluteSize.X
                    local posY = (input.Position.Y - satValBox.AbsolutePosition.Y) / satValBox.AbsoluteSize.Y
                    
                    posX = math.clamp(posX, 0, 1)
                    posY = math.clamp(posY, 0, 1)
                    
                    pickerState.sat = posX
                    pickerState.val = 1 - posY
                    
                    satValSelector.Position = UDim2.new(posX, 0, posY, 0)
                    
                    updateColor()
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if isDraggingSatVal and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                    -- Update sat/val based on input position
                    local posX = (input.Position.X - satValBox.AbsolutePosition.X) / satValBox.AbsoluteSize.X
                    local posY = (input.Position.Y - satValBox.AbsolutePosition.Y) / satValBox.AbsoluteSize.Y
                    
                    posX = math.clamp(posX, 0, 1)
                    posY = math.clamp(posY, 0, 1)
                    
                    pickerState.sat = posX
                    pickerState.val = 1 - posY
                    
                    satValSelector.Position = UDim2.new(posX, 0, posY, 0)
                    
                    updateColor()
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    isDraggingHue = false
                    isDraggingSatVal = false
                end
            end)
            
            -- Toggle picker on click
            colorDisplay.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    togglePicker()
                end
            end)
            
            -- Close picker when clicking elsewhere
            UserInputService.InputBegan:Connect(function(input)
                if pickerState.open and input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    local inPickerArea = false
                    
                    -- Check if click is within picker area
                    local mousePos = UserInputService:GetMouseLocation()
                    local pickerPos = pickerPopup.AbsolutePosition
                    local pickerSize = pickerPopup.AbsoluteSize
                    
                    if mousePos.X >= pickerPos.X and mousePos.X <= pickerPos.X + pickerSize.X and
                       mousePos.Y >= pickerPos.Y and mousePos.Y <= pickerPos.Y + pickerSize.Y then
                        inPickerArea = true
                    end
                    
                    -- Check if click is within display area
                    local displayPos = colorDisplay.AbsolutePosition
                    local displaySize = colorDisplay.AbsoluteSize
                    
                    if mousePos.X >= displayPos.X and mousePos.X <= displayPos.X + displaySize.X and
                       mousePos.Y >= displayPos.Y and mousePos.Y <= displayPos.Y + displaySize.Y then
                        inPickerArea = true
                    end
                    
                    if not inPickerArea then
                        togglePicker()
                    end
                end
            end)
            
            -- Return color picker object with API
            local colorPickerObj = {
                Instance = colorPickerContainer,
                SetColor = function(self, color)
                    pickerState.hue, pickerState.sat, pickerState.val = Utility:RGBtoHSV(color)
                    hueSelector.Position = UDim2.new(pickerState.hue / 360, -2, 0, 0)
                    satValSelector.Position = UDim2.new(pickerState.sat, 0, 1 - pickerState.val, 0)
                    updateColor()
                end,
                GetColor = function(self)
                    return pickerState.color
                end
            }
            
            return colorPickerObj
        end
        
        function tab:AddTextbox(text, placeholderText, callback)
            local textboxContainer = Elements:CreateFrame({
                Size = UDim2.new(1, 0, 0, UI.ElementHeight),
                BackgroundColor3 = COLORS.LightContrast,
                Parent = tabContent
            })
            
            -- Add label
            local label = Instance.new("TextLabel")
            label.Name = "Label"
            label.Size = UDim2.new(0.4, -10, 1, 0)
            label.Position = UDim2.fromOffset(10, 0)
            label.BackgroundTransparency = 1
            label.Font = Enum.Font.Gotham
            label.TextSize = 14
            label.TextColor3 = COLORS.TextColor
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Text = text or "Input"
            label.Parent = textboxContainer
            
            -- Create textbox background
            local textboxBg = Instance.new("Frame")
            textboxBg.Name = "TextboxBackground"
            textboxBg.Size = UDim2.new(0.6, -10, 0, UI.ElementHeight - 10)
            textboxBg.Position = UDim2.new(0.4, 5, 0.5, 0)
            textboxBg.AnchorPoint = Vector2.new(0, 0.5)
            textboxBg.BackgroundColor3 = COLORS.DarkContrast
            textboxBg.BorderSizePixel = 0
            textboxBg.Parent = textboxContainer
            
            -- Add corner to textbox background
            local bgCorner = Instance.new("UICorner")
            bgCorner.CornerRadius = UDim.new(0, 4)
            bgCorner.Parent = textboxBg
            
            -- Create actual textbox
            local textbox = Instance.new("TextBox")
            textbox.Name = "Textbox"
            textbox.Size = UDim2.new(1, -10, 1, 0)
            textbox.Position = UDim2.fromOffset(5, 0)
            textbox.BackgroundTransparency = 1
            textbox.Font = Enum.Font.Gotham
            textbox.TextSize = 14
            textbox.TextColor3 = COLORS.TextColor
            textbox.PlaceholderText = placeholderText or "Type here..."
            textbox.PlaceholderColor3 = COLORS.PlaceholderColor
            textbox.Text = ""
            textbox.ClearTextOnFocus = false
            textbox.Parent = textboxBg
            
            -- Add focus highlight
            local isFocused = false
            
            textbox.Focused:Connect(function()
                isFocused = true
                Utility:Tween(textboxBg, {BackgroundColor3 = COLORS.Accent}, 0.2)
            end)
            
            textbox.FocusLost:Connect(function(enterPressed)
                isFocused = false
                Utility:Tween(textboxBg, {BackgroundColor3 = COLORS.DarkContrast}, 0.2)
                
                if enterPressed and callback then
                    callback(textbox.Text)
                end
            end)
            
            -- Return textbox object with API
            local textboxObj = {
                Instance = textboxContainer,
                SetText = function(self, text)
                    textbox.Text = text
                end,
                GetText = function(self)
                    return textbox.Text
                end,
                ClearText = function(self)
                    textbox.Text = ""
                end
            }
            
            return textboxObj
        end
        
        return tab
    end
    
    -- Set up the initial window appearance with a fade-in effect
    mainFrame.BackgroundTransparency = 1
    shadow.ImageTransparency = 1
    
    -- Fade in the window
    Utility:Tween(mainFrame, {BackgroundTransparency = 0}, 0.5)
    Utility:Tween(shadow, {ImageTransparency = 0.5}, 0.5)
    
    -- Notification function
    function window:Notify(title, message, duration)
        title = title or "Notification"
        message = message or ""
        duration = duration or 5
        
        -- Create notification container
        local notification = Elements:CreateFrame({
            Size = UDim2.new(0, 300, 0, 80),
            Position = UDim2.new(1, -320, 1, 0), -- Start below screen
            AnchorPoint = Vector2.new(0, 1),
            BackgroundColor3 = COLORS.Background,
            ZIndex = UI.ZIndex.Notification,
            Parent = container
        })
        
        -- Add shadow
        local notifShadow = Instance.new("ImageLabel")
        notifShadow.Name = "Shadow"
        notifShadow.Size = UDim2.new(1, 20, 1, 20)
        notifShadow.Position = UDim2.fromScale(0.5, 0.5)
        notifShadow.AnchorPoint = Vector2.new(0.5, 0.5)
        notifShadow.BackgroundTransparency = 1
        notifShadow.Image = "rbxassetid://6014261993"
        notifShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
        notifShadow.ImageTransparency = 0.5
        notifShadow.ScaleType = Enum.ScaleType.Slice
        notifShadow.SliceCenter = Rect.new(49, 49, 450, 450)
        notifShadow.ZIndex = notification.ZIndex - 1
        notifShadow.Parent = notification
        
        -- Create title
        local notifTitle = Instance.new("TextLabel")
        notifTitle.Name = "Title"
        notifTitle.Size = UDim2.new(1, -20, 0, 30)
        notifTitle.Position = UDim2.fromOffset(10, 5)
        notifTitle.BackgroundTransparency = 1
        notifTitle.Font = Enum.Font.GothamBold
        notifTitle.TextSize = 16
        notifTitle.TextColor3 = COLORS.Accent
        notifTitle.TextXAlignment = Enum.TextXAlignment.Left
        notifTitle.Text = title
        notifTitle.ZIndex = notification.ZIndex + 1
        notifTitle.Parent = notification
        
        -- Create message
        local notifMessage = Instance.new("TextLabel")
        notifMessage.Name = "Message"
        notifMessage.Size = UDim2.new(1, -20, 0, 40)
        notifMessage.Position = UDim2.fromOffset(10, 35)
        notifMessage.BackgroundTransparency = 1
        notifMessage.Font = Enum.Font.Gotham
        notifMessage.TextSize = 14
        notifMessage.TextColor3 = COLORS.TextColor
        notifMessage.TextXAlignment = Enum.TextXAlignment.Left
        notifMessage.TextYAlignment = Enum.TextYAlignment.Top
        notifMessage.TextWrapped = true
        notifMessage.Text = message
        notifMessage.ZIndex = notification.ZIndex + 1
        notifMessage.Parent = notification
        
        -- Create progress bar
        local progressBar = Instance.new("Frame")
        progressBar.Name = "ProgressBar"
        progressBar.Size = UDim2.new(1, 0, 0, 3)
        progressBar.Position = UDim2.new(0, 0, 1, -3)
        progressBar.BackgroundColor3 = COLORS.Accent
        progressBar.BorderSizePixel = 0
        progressBar.ZIndex = notification.ZIndex + 1
        progressBar.Parent = notification
        
        -- Animate notification in
        Utility:Tween(notification, {Position = UDim2.new(1, -320, 1, -90)}, ANIMATION.NotificationDuration, Enum.EasingStyle.Quint)
        
        -- Animate progress bar
        Utility:Tween(progressBar, {Size = UDim2.new(0, 0, 0, 3)}, duration, Enum.EasingStyle.Linear)
        
        -- Schedule dismissal
        task.delay(duration, function()
            -- Animate notification out
            Utility:Tween(notification, {Position = UDim2.new(1, 0, 1, -90)}, ANIMATION.NotificationDuration, Enum.EasingStyle.Quint)
            
            -- Destroy after animation completes
            task.delay(ANIMATION.NotificationDuration, function()
                notification:Destroy()
            end)
        end)
        
        return notification
    end
    
    -- Window and container references
    window.MainFrame = mainFrame
    window.Container = container
    
    return window
end

-- Create theme preset
function ZENtrix:SetTheme(theme)
    if type(theme) ~= "table" then return end
    
    for key, color in pairs(theme) do
        if COLORS[key] then
            COLORS[key] = color
        end
    end
end

-- Return the library
return ZENtrix